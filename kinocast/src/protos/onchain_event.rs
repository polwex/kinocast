// This file is generated by rust-protobuf 2.28.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `onchain_event.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_28_0;

#[derive(PartialEq,Clone,Default)]
pub struct OnChainEvent {
    // message fields
    pub field_type: OnChainEventType,
    pub chain_id: u32,
    pub block_number: u32,
    pub block_hash: ::std::vec::Vec<u8>,
    pub block_timestamp: u64,
    pub transaction_hash: ::std::vec::Vec<u8>,
    pub log_index: u32,
    pub fid: u64,
    pub tx_index: u32,
    pub version: u32,
    // message oneof groups
    pub body: ::std::option::Option<OnChainEvent_oneof_body>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a OnChainEvent {
    fn default() -> &'a OnChainEvent {
        <OnChainEvent as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum OnChainEvent_oneof_body {
    signer_event_body(SignerEventBody),
    signer_migrated_event_body(SignerMigratedEventBody),
    id_register_event_body(IdRegisterEventBody),
    storage_rent_event_body(StorageRentEventBody),
}

impl OnChainEvent {
    pub fn new() -> OnChainEvent {
        ::std::default::Default::default()
    }

    // .OnChainEventType type = 1;


    pub fn get_field_type(&self) -> OnChainEventType {
        self.field_type
    }
    pub fn clear_field_type(&mut self) {
        self.field_type = OnChainEventType::EVENT_TYPE_NONE;
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: OnChainEventType) {
        self.field_type = v;
    }

    // uint32 chain_id = 2;


    pub fn get_chain_id(&self) -> u32 {
        self.chain_id
    }
    pub fn clear_chain_id(&mut self) {
        self.chain_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_chain_id(&mut self, v: u32) {
        self.chain_id = v;
    }

    // uint32 block_number = 3;


    pub fn get_block_number(&self) -> u32 {
        self.block_number
    }
    pub fn clear_block_number(&mut self) {
        self.block_number = 0;
    }

    // Param is passed by value, moved
    pub fn set_block_number(&mut self, v: u32) {
        self.block_number = v;
    }

    // bytes block_hash = 4;


    pub fn get_block_hash(&self) -> &[u8] {
        &self.block_hash
    }
    pub fn clear_block_hash(&mut self) {
        self.block_hash.clear();
    }

    // Param is passed by value, moved
    pub fn set_block_hash(&mut self, v: ::std::vec::Vec<u8>) {
        self.block_hash = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_block_hash(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.block_hash
    }

    // Take field
    pub fn take_block_hash(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.block_hash, ::std::vec::Vec::new())
    }

    // uint64 block_timestamp = 5;


    pub fn get_block_timestamp(&self) -> u64 {
        self.block_timestamp
    }
    pub fn clear_block_timestamp(&mut self) {
        self.block_timestamp = 0;
    }

    // Param is passed by value, moved
    pub fn set_block_timestamp(&mut self, v: u64) {
        self.block_timestamp = v;
    }

    // bytes transaction_hash = 6;


    pub fn get_transaction_hash(&self) -> &[u8] {
        &self.transaction_hash
    }
    pub fn clear_transaction_hash(&mut self) {
        self.transaction_hash.clear();
    }

    // Param is passed by value, moved
    pub fn set_transaction_hash(&mut self, v: ::std::vec::Vec<u8>) {
        self.transaction_hash = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_transaction_hash(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.transaction_hash
    }

    // Take field
    pub fn take_transaction_hash(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.transaction_hash, ::std::vec::Vec::new())
    }

    // uint32 log_index = 7;


    pub fn get_log_index(&self) -> u32 {
        self.log_index
    }
    pub fn clear_log_index(&mut self) {
        self.log_index = 0;
    }

    // Param is passed by value, moved
    pub fn set_log_index(&mut self, v: u32) {
        self.log_index = v;
    }

    // uint64 fid = 8;


    pub fn get_fid(&self) -> u64 {
        self.fid
    }
    pub fn clear_fid(&mut self) {
        self.fid = 0;
    }

    // Param is passed by value, moved
    pub fn set_fid(&mut self, v: u64) {
        self.fid = v;
    }

    // .SignerEventBody signer_event_body = 9;


    pub fn get_signer_event_body(&self) -> &SignerEventBody {
        match self.body {
            ::std::option::Option::Some(OnChainEvent_oneof_body::signer_event_body(ref v)) => v,
            _ => <SignerEventBody as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_signer_event_body(&mut self) {
        self.body = ::std::option::Option::None;
    }

    pub fn has_signer_event_body(&self) -> bool {
        match self.body {
            ::std::option::Option::Some(OnChainEvent_oneof_body::signer_event_body(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_signer_event_body(&mut self, v: SignerEventBody) {
        self.body = ::std::option::Option::Some(OnChainEvent_oneof_body::signer_event_body(v))
    }

    // Mutable pointer to the field.
    pub fn mut_signer_event_body(&mut self) -> &mut SignerEventBody {
        if let ::std::option::Option::Some(OnChainEvent_oneof_body::signer_event_body(_)) = self.body {
        } else {
            self.body = ::std::option::Option::Some(OnChainEvent_oneof_body::signer_event_body(SignerEventBody::new()));
        }
        match self.body {
            ::std::option::Option::Some(OnChainEvent_oneof_body::signer_event_body(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_signer_event_body(&mut self) -> SignerEventBody {
        if self.has_signer_event_body() {
            match self.body.take() {
                ::std::option::Option::Some(OnChainEvent_oneof_body::signer_event_body(v)) => v,
                _ => panic!(),
            }
        } else {
            SignerEventBody::new()
        }
    }

    // .SignerMigratedEventBody signer_migrated_event_body = 10;


    pub fn get_signer_migrated_event_body(&self) -> &SignerMigratedEventBody {
        match self.body {
            ::std::option::Option::Some(OnChainEvent_oneof_body::signer_migrated_event_body(ref v)) => v,
            _ => <SignerMigratedEventBody as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_signer_migrated_event_body(&mut self) {
        self.body = ::std::option::Option::None;
    }

    pub fn has_signer_migrated_event_body(&self) -> bool {
        match self.body {
            ::std::option::Option::Some(OnChainEvent_oneof_body::signer_migrated_event_body(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_signer_migrated_event_body(&mut self, v: SignerMigratedEventBody) {
        self.body = ::std::option::Option::Some(OnChainEvent_oneof_body::signer_migrated_event_body(v))
    }

    // Mutable pointer to the field.
    pub fn mut_signer_migrated_event_body(&mut self) -> &mut SignerMigratedEventBody {
        if let ::std::option::Option::Some(OnChainEvent_oneof_body::signer_migrated_event_body(_)) = self.body {
        } else {
            self.body = ::std::option::Option::Some(OnChainEvent_oneof_body::signer_migrated_event_body(SignerMigratedEventBody::new()));
        }
        match self.body {
            ::std::option::Option::Some(OnChainEvent_oneof_body::signer_migrated_event_body(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_signer_migrated_event_body(&mut self) -> SignerMigratedEventBody {
        if self.has_signer_migrated_event_body() {
            match self.body.take() {
                ::std::option::Option::Some(OnChainEvent_oneof_body::signer_migrated_event_body(v)) => v,
                _ => panic!(),
            }
        } else {
            SignerMigratedEventBody::new()
        }
    }

    // .IdRegisterEventBody id_register_event_body = 11;


    pub fn get_id_register_event_body(&self) -> &IdRegisterEventBody {
        match self.body {
            ::std::option::Option::Some(OnChainEvent_oneof_body::id_register_event_body(ref v)) => v,
            _ => <IdRegisterEventBody as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_id_register_event_body(&mut self) {
        self.body = ::std::option::Option::None;
    }

    pub fn has_id_register_event_body(&self) -> bool {
        match self.body {
            ::std::option::Option::Some(OnChainEvent_oneof_body::id_register_event_body(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_id_register_event_body(&mut self, v: IdRegisterEventBody) {
        self.body = ::std::option::Option::Some(OnChainEvent_oneof_body::id_register_event_body(v))
    }

    // Mutable pointer to the field.
    pub fn mut_id_register_event_body(&mut self) -> &mut IdRegisterEventBody {
        if let ::std::option::Option::Some(OnChainEvent_oneof_body::id_register_event_body(_)) = self.body {
        } else {
            self.body = ::std::option::Option::Some(OnChainEvent_oneof_body::id_register_event_body(IdRegisterEventBody::new()));
        }
        match self.body {
            ::std::option::Option::Some(OnChainEvent_oneof_body::id_register_event_body(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_id_register_event_body(&mut self) -> IdRegisterEventBody {
        if self.has_id_register_event_body() {
            match self.body.take() {
                ::std::option::Option::Some(OnChainEvent_oneof_body::id_register_event_body(v)) => v,
                _ => panic!(),
            }
        } else {
            IdRegisterEventBody::new()
        }
    }

    // .StorageRentEventBody storage_rent_event_body = 12;


    pub fn get_storage_rent_event_body(&self) -> &StorageRentEventBody {
        match self.body {
            ::std::option::Option::Some(OnChainEvent_oneof_body::storage_rent_event_body(ref v)) => v,
            _ => <StorageRentEventBody as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_storage_rent_event_body(&mut self) {
        self.body = ::std::option::Option::None;
    }

    pub fn has_storage_rent_event_body(&self) -> bool {
        match self.body {
            ::std::option::Option::Some(OnChainEvent_oneof_body::storage_rent_event_body(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_storage_rent_event_body(&mut self, v: StorageRentEventBody) {
        self.body = ::std::option::Option::Some(OnChainEvent_oneof_body::storage_rent_event_body(v))
    }

    // Mutable pointer to the field.
    pub fn mut_storage_rent_event_body(&mut self) -> &mut StorageRentEventBody {
        if let ::std::option::Option::Some(OnChainEvent_oneof_body::storage_rent_event_body(_)) = self.body {
        } else {
            self.body = ::std::option::Option::Some(OnChainEvent_oneof_body::storage_rent_event_body(StorageRentEventBody::new()));
        }
        match self.body {
            ::std::option::Option::Some(OnChainEvent_oneof_body::storage_rent_event_body(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_storage_rent_event_body(&mut self) -> StorageRentEventBody {
        if self.has_storage_rent_event_body() {
            match self.body.take() {
                ::std::option::Option::Some(OnChainEvent_oneof_body::storage_rent_event_body(v)) => v,
                _ => panic!(),
            }
        } else {
            StorageRentEventBody::new()
        }
    }

    // uint32 tx_index = 13;


    pub fn get_tx_index(&self) -> u32 {
        self.tx_index
    }
    pub fn clear_tx_index(&mut self) {
        self.tx_index = 0;
    }

    // Param is passed by value, moved
    pub fn set_tx_index(&mut self, v: u32) {
        self.tx_index = v;
    }

    // uint32 version = 14;


    pub fn get_version(&self) -> u32 {
        self.version
    }
    pub fn clear_version(&mut self) {
        self.version = 0;
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: u32) {
        self.version = v;
    }
}

impl ::protobuf::Message for OnChainEvent {
    fn is_initialized(&self) -> bool {
        if let Some(OnChainEvent_oneof_body::signer_event_body(ref v)) = self.body {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(OnChainEvent_oneof_body::signer_migrated_event_body(ref v)) = self.body {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(OnChainEvent_oneof_body::id_register_event_body(ref v)) = self.body {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(OnChainEvent_oneof_body::storage_rent_event_body(ref v)) = self.body {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.field_type, 1, &mut self.unknown_fields)?
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.chain_id = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.block_number = tmp;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.block_hash)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.block_timestamp = tmp;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.transaction_hash)?;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.log_index = tmp;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.fid = tmp;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.body = ::std::option::Option::Some(OnChainEvent_oneof_body::signer_event_body(is.read_message()?));
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.body = ::std::option::Option::Some(OnChainEvent_oneof_body::signer_migrated_event_body(is.read_message()?));
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.body = ::std::option::Option::Some(OnChainEvent_oneof_body::id_register_event_body(is.read_message()?));
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.body = ::std::option::Option::Some(OnChainEvent_oneof_body::storage_rent_event_body(is.read_message()?));
                },
                13 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.tx_index = tmp;
                },
                14 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.version = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.field_type != OnChainEventType::EVENT_TYPE_NONE {
            my_size += ::protobuf::rt::enum_size(1, self.field_type);
        }
        if self.chain_id != 0 {
            my_size += ::protobuf::rt::value_size(2, self.chain_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.block_number != 0 {
            my_size += ::protobuf::rt::value_size(3, self.block_number, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.block_hash.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.block_hash);
        }
        if self.block_timestamp != 0 {
            my_size += ::protobuf::rt::value_size(5, self.block_timestamp, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.transaction_hash.is_empty() {
            my_size += ::protobuf::rt::bytes_size(6, &self.transaction_hash);
        }
        if self.log_index != 0 {
            my_size += ::protobuf::rt::value_size(7, self.log_index, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.fid != 0 {
            my_size += ::protobuf::rt::value_size(8, self.fid, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.tx_index != 0 {
            my_size += ::protobuf::rt::value_size(13, self.tx_index, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.version != 0 {
            my_size += ::protobuf::rt::value_size(14, self.version, ::protobuf::wire_format::WireTypeVarint);
        }
        if let ::std::option::Option::Some(ref v) = self.body {
            match v {
                &OnChainEvent_oneof_body::signer_event_body(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &OnChainEvent_oneof_body::signer_migrated_event_body(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &OnChainEvent_oneof_body::id_register_event_body(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &OnChainEvent_oneof_body::storage_rent_event_body(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.field_type != OnChainEventType::EVENT_TYPE_NONE {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.field_type))?;
        }
        if self.chain_id != 0 {
            os.write_uint32(2, self.chain_id)?;
        }
        if self.block_number != 0 {
            os.write_uint32(3, self.block_number)?;
        }
        if !self.block_hash.is_empty() {
            os.write_bytes(4, &self.block_hash)?;
        }
        if self.block_timestamp != 0 {
            os.write_uint64(5, self.block_timestamp)?;
        }
        if !self.transaction_hash.is_empty() {
            os.write_bytes(6, &self.transaction_hash)?;
        }
        if self.log_index != 0 {
            os.write_uint32(7, self.log_index)?;
        }
        if self.fid != 0 {
            os.write_uint64(8, self.fid)?;
        }
        if self.tx_index != 0 {
            os.write_uint32(13, self.tx_index)?;
        }
        if self.version != 0 {
            os.write_uint32(14, self.version)?;
        }
        if let ::std::option::Option::Some(ref v) = self.body {
            match v {
                &OnChainEvent_oneof_body::signer_event_body(ref v) => {
                    os.write_tag(9, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &OnChainEvent_oneof_body::signer_migrated_event_body(ref v) => {
                    os.write_tag(10, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &OnChainEvent_oneof_body::id_register_event_body(ref v) => {
                    os.write_tag(11, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &OnChainEvent_oneof_body::storage_rent_event_body(ref v) => {
                    os.write_tag(12, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> OnChainEvent {
        OnChainEvent::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<OnChainEventType>>(
                "type",
                |m: &OnChainEvent| { &m.field_type },
                |m: &mut OnChainEvent| { &mut m.field_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "chain_id",
                |m: &OnChainEvent| { &m.chain_id },
                |m: &mut OnChainEvent| { &mut m.chain_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "block_number",
                |m: &OnChainEvent| { &m.block_number },
                |m: &mut OnChainEvent| { &mut m.block_number },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "block_hash",
                |m: &OnChainEvent| { &m.block_hash },
                |m: &mut OnChainEvent| { &mut m.block_hash },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "block_timestamp",
                |m: &OnChainEvent| { &m.block_timestamp },
                |m: &mut OnChainEvent| { &mut m.block_timestamp },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "transaction_hash",
                |m: &OnChainEvent| { &m.transaction_hash },
                |m: &mut OnChainEvent| { &mut m.transaction_hash },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "log_index",
                |m: &OnChainEvent| { &m.log_index },
                |m: &mut OnChainEvent| { &mut m.log_index },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "fid",
                |m: &OnChainEvent| { &m.fid },
                |m: &mut OnChainEvent| { &mut m.fid },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, SignerEventBody>(
                "signer_event_body",
                OnChainEvent::has_signer_event_body,
                OnChainEvent::get_signer_event_body,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, SignerMigratedEventBody>(
                "signer_migrated_event_body",
                OnChainEvent::has_signer_migrated_event_body,
                OnChainEvent::get_signer_migrated_event_body,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, IdRegisterEventBody>(
                "id_register_event_body",
                OnChainEvent::has_id_register_event_body,
                OnChainEvent::get_id_register_event_body,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, StorageRentEventBody>(
                "storage_rent_event_body",
                OnChainEvent::has_storage_rent_event_body,
                OnChainEvent::get_storage_rent_event_body,
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "tx_index",
                |m: &OnChainEvent| { &m.tx_index },
                |m: &mut OnChainEvent| { &mut m.tx_index },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "version",
                |m: &OnChainEvent| { &m.version },
                |m: &mut OnChainEvent| { &mut m.version },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<OnChainEvent>(
                "OnChainEvent",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static OnChainEvent {
        static instance: ::protobuf::rt::LazyV2<OnChainEvent> = ::protobuf::rt::LazyV2::INIT;
        instance.get(OnChainEvent::new)
    }
}

impl ::protobuf::Clear for OnChainEvent {
    fn clear(&mut self) {
        self.field_type = OnChainEventType::EVENT_TYPE_NONE;
        self.chain_id = 0;
        self.block_number = 0;
        self.block_hash.clear();
        self.block_timestamp = 0;
        self.transaction_hash.clear();
        self.log_index = 0;
        self.fid = 0;
        self.body = ::std::option::Option::None;
        self.body = ::std::option::Option::None;
        self.body = ::std::option::Option::None;
        self.body = ::std::option::Option::None;
        self.tx_index = 0;
        self.version = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for OnChainEvent {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for OnChainEvent {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SignerEventBody {
    // message fields
    pub key: ::std::vec::Vec<u8>,
    pub key_type: u32,
    pub event_type: SignerEventType,
    pub metadata: ::std::vec::Vec<u8>,
    pub metadata_type: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SignerEventBody {
    fn default() -> &'a SignerEventBody {
        <SignerEventBody as ::protobuf::Message>::default_instance()
    }
}

impl SignerEventBody {
    pub fn new() -> SignerEventBody {
        ::std::default::Default::default()
    }

    // bytes key = 1;


    pub fn get_key(&self) -> &[u8] {
        &self.key
    }
    pub fn clear_key(&mut self) {
        self.key.clear();
    }

    // Param is passed by value, moved
    pub fn set_key(&mut self, v: ::std::vec::Vec<u8>) {
        self.key = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_key(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.key
    }

    // Take field
    pub fn take_key(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.key, ::std::vec::Vec::new())
    }

    // uint32 key_type = 2;


    pub fn get_key_type(&self) -> u32 {
        self.key_type
    }
    pub fn clear_key_type(&mut self) {
        self.key_type = 0;
    }

    // Param is passed by value, moved
    pub fn set_key_type(&mut self, v: u32) {
        self.key_type = v;
    }

    // .SignerEventType event_type = 3;


    pub fn get_event_type(&self) -> SignerEventType {
        self.event_type
    }
    pub fn clear_event_type(&mut self) {
        self.event_type = SignerEventType::SIGNER_EVENT_TYPE_NONE;
    }

    // Param is passed by value, moved
    pub fn set_event_type(&mut self, v: SignerEventType) {
        self.event_type = v;
    }

    // bytes metadata = 4;


    pub fn get_metadata(&self) -> &[u8] {
        &self.metadata
    }
    pub fn clear_metadata(&mut self) {
        self.metadata.clear();
    }

    // Param is passed by value, moved
    pub fn set_metadata(&mut self, v: ::std::vec::Vec<u8>) {
        self.metadata = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_metadata(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.metadata
    }

    // Take field
    pub fn take_metadata(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.metadata, ::std::vec::Vec::new())
    }

    // uint32 metadata_type = 5;


    pub fn get_metadata_type(&self) -> u32 {
        self.metadata_type
    }
    pub fn clear_metadata_type(&mut self) {
        self.metadata_type = 0;
    }

    // Param is passed by value, moved
    pub fn set_metadata_type(&mut self, v: u32) {
        self.metadata_type = v;
    }
}

impl ::protobuf::Message for SignerEventBody {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.key)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.key_type = tmp;
                },
                3 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.event_type, 3, &mut self.unknown_fields)?
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.metadata)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.metadata_type = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.key.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.key);
        }
        if self.key_type != 0 {
            my_size += ::protobuf::rt::value_size(2, self.key_type, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.event_type != SignerEventType::SIGNER_EVENT_TYPE_NONE {
            my_size += ::protobuf::rt::enum_size(3, self.event_type);
        }
        if !self.metadata.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.metadata);
        }
        if self.metadata_type != 0 {
            my_size += ::protobuf::rt::value_size(5, self.metadata_type, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.key.is_empty() {
            os.write_bytes(1, &self.key)?;
        }
        if self.key_type != 0 {
            os.write_uint32(2, self.key_type)?;
        }
        if self.event_type != SignerEventType::SIGNER_EVENT_TYPE_NONE {
            os.write_enum(3, ::protobuf::ProtobufEnum::value(&self.event_type))?;
        }
        if !self.metadata.is_empty() {
            os.write_bytes(4, &self.metadata)?;
        }
        if self.metadata_type != 0 {
            os.write_uint32(5, self.metadata_type)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SignerEventBody {
        SignerEventBody::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "key",
                |m: &SignerEventBody| { &m.key },
                |m: &mut SignerEventBody| { &mut m.key },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "key_type",
                |m: &SignerEventBody| { &m.key_type },
                |m: &mut SignerEventBody| { &mut m.key_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<SignerEventType>>(
                "event_type",
                |m: &SignerEventBody| { &m.event_type },
                |m: &mut SignerEventBody| { &mut m.event_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "metadata",
                |m: &SignerEventBody| { &m.metadata },
                |m: &mut SignerEventBody| { &mut m.metadata },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "metadata_type",
                |m: &SignerEventBody| { &m.metadata_type },
                |m: &mut SignerEventBody| { &mut m.metadata_type },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SignerEventBody>(
                "SignerEventBody",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SignerEventBody {
        static instance: ::protobuf::rt::LazyV2<SignerEventBody> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SignerEventBody::new)
    }
}

impl ::protobuf::Clear for SignerEventBody {
    fn clear(&mut self) {
        self.key.clear();
        self.key_type = 0;
        self.event_type = SignerEventType::SIGNER_EVENT_TYPE_NONE;
        self.metadata.clear();
        self.metadata_type = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SignerEventBody {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SignerEventBody {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SignerMigratedEventBody {
    // message fields
    pub migratedAt: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SignerMigratedEventBody {
    fn default() -> &'a SignerMigratedEventBody {
        <SignerMigratedEventBody as ::protobuf::Message>::default_instance()
    }
}

impl SignerMigratedEventBody {
    pub fn new() -> SignerMigratedEventBody {
        ::std::default::Default::default()
    }

    // uint32 migratedAt = 1;


    pub fn get_migratedAt(&self) -> u32 {
        self.migratedAt
    }
    pub fn clear_migratedAt(&mut self) {
        self.migratedAt = 0;
    }

    // Param is passed by value, moved
    pub fn set_migratedAt(&mut self, v: u32) {
        self.migratedAt = v;
    }
}

impl ::protobuf::Message for SignerMigratedEventBody {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.migratedAt = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.migratedAt != 0 {
            my_size += ::protobuf::rt::value_size(1, self.migratedAt, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.migratedAt != 0 {
            os.write_uint32(1, self.migratedAt)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SignerMigratedEventBody {
        SignerMigratedEventBody::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "migratedAt",
                |m: &SignerMigratedEventBody| { &m.migratedAt },
                |m: &mut SignerMigratedEventBody| { &mut m.migratedAt },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SignerMigratedEventBody>(
                "SignerMigratedEventBody",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SignerMigratedEventBody {
        static instance: ::protobuf::rt::LazyV2<SignerMigratedEventBody> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SignerMigratedEventBody::new)
    }
}

impl ::protobuf::Clear for SignerMigratedEventBody {
    fn clear(&mut self) {
        self.migratedAt = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SignerMigratedEventBody {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SignerMigratedEventBody {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct IdRegisterEventBody {
    // message fields
    pub to: ::std::vec::Vec<u8>,
    pub event_type: IdRegisterEventType,
    pub from: ::std::vec::Vec<u8>,
    pub recovery_address: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a IdRegisterEventBody {
    fn default() -> &'a IdRegisterEventBody {
        <IdRegisterEventBody as ::protobuf::Message>::default_instance()
    }
}

impl IdRegisterEventBody {
    pub fn new() -> IdRegisterEventBody {
        ::std::default::Default::default()
    }

    // bytes to = 1;


    pub fn get_to(&self) -> &[u8] {
        &self.to
    }
    pub fn clear_to(&mut self) {
        self.to.clear();
    }

    // Param is passed by value, moved
    pub fn set_to(&mut self, v: ::std::vec::Vec<u8>) {
        self.to = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_to(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.to
    }

    // Take field
    pub fn take_to(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.to, ::std::vec::Vec::new())
    }

    // .IdRegisterEventType event_type = 2;


    pub fn get_event_type(&self) -> IdRegisterEventType {
        self.event_type
    }
    pub fn clear_event_type(&mut self) {
        self.event_type = IdRegisterEventType::ID_REGISTER_EVENT_TYPE_NONE;
    }

    // Param is passed by value, moved
    pub fn set_event_type(&mut self, v: IdRegisterEventType) {
        self.event_type = v;
    }

    // bytes from = 3;


    pub fn get_from(&self) -> &[u8] {
        &self.from
    }
    pub fn clear_from(&mut self) {
        self.from.clear();
    }

    // Param is passed by value, moved
    pub fn set_from(&mut self, v: ::std::vec::Vec<u8>) {
        self.from = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_from(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.from
    }

    // Take field
    pub fn take_from(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.from, ::std::vec::Vec::new())
    }

    // bytes recovery_address = 4;


    pub fn get_recovery_address(&self) -> &[u8] {
        &self.recovery_address
    }
    pub fn clear_recovery_address(&mut self) {
        self.recovery_address.clear();
    }

    // Param is passed by value, moved
    pub fn set_recovery_address(&mut self, v: ::std::vec::Vec<u8>) {
        self.recovery_address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_recovery_address(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.recovery_address
    }

    // Take field
    pub fn take_recovery_address(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.recovery_address, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for IdRegisterEventBody {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.to)?;
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.event_type, 2, &mut self.unknown_fields)?
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.from)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.recovery_address)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.to.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.to);
        }
        if self.event_type != IdRegisterEventType::ID_REGISTER_EVENT_TYPE_NONE {
            my_size += ::protobuf::rt::enum_size(2, self.event_type);
        }
        if !self.from.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.from);
        }
        if !self.recovery_address.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.recovery_address);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.to.is_empty() {
            os.write_bytes(1, &self.to)?;
        }
        if self.event_type != IdRegisterEventType::ID_REGISTER_EVENT_TYPE_NONE {
            os.write_enum(2, ::protobuf::ProtobufEnum::value(&self.event_type))?;
        }
        if !self.from.is_empty() {
            os.write_bytes(3, &self.from)?;
        }
        if !self.recovery_address.is_empty() {
            os.write_bytes(4, &self.recovery_address)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> IdRegisterEventBody {
        IdRegisterEventBody::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "to",
                |m: &IdRegisterEventBody| { &m.to },
                |m: &mut IdRegisterEventBody| { &mut m.to },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<IdRegisterEventType>>(
                "event_type",
                |m: &IdRegisterEventBody| { &m.event_type },
                |m: &mut IdRegisterEventBody| { &mut m.event_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "from",
                |m: &IdRegisterEventBody| { &m.from },
                |m: &mut IdRegisterEventBody| { &mut m.from },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "recovery_address",
                |m: &IdRegisterEventBody| { &m.recovery_address },
                |m: &mut IdRegisterEventBody| { &mut m.recovery_address },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<IdRegisterEventBody>(
                "IdRegisterEventBody",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static IdRegisterEventBody {
        static instance: ::protobuf::rt::LazyV2<IdRegisterEventBody> = ::protobuf::rt::LazyV2::INIT;
        instance.get(IdRegisterEventBody::new)
    }
}

impl ::protobuf::Clear for IdRegisterEventBody {
    fn clear(&mut self) {
        self.to.clear();
        self.event_type = IdRegisterEventType::ID_REGISTER_EVENT_TYPE_NONE;
        self.from.clear();
        self.recovery_address.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for IdRegisterEventBody {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for IdRegisterEventBody {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct StorageRentEventBody {
    // message fields
    pub payer: ::std::vec::Vec<u8>,
    pub units: u32,
    pub expiry: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a StorageRentEventBody {
    fn default() -> &'a StorageRentEventBody {
        <StorageRentEventBody as ::protobuf::Message>::default_instance()
    }
}

impl StorageRentEventBody {
    pub fn new() -> StorageRentEventBody {
        ::std::default::Default::default()
    }

    // bytes payer = 1;


    pub fn get_payer(&self) -> &[u8] {
        &self.payer
    }
    pub fn clear_payer(&mut self) {
        self.payer.clear();
    }

    // Param is passed by value, moved
    pub fn set_payer(&mut self, v: ::std::vec::Vec<u8>) {
        self.payer = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_payer(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.payer
    }

    // Take field
    pub fn take_payer(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.payer, ::std::vec::Vec::new())
    }

    // uint32 units = 2;


    pub fn get_units(&self) -> u32 {
        self.units
    }
    pub fn clear_units(&mut self) {
        self.units = 0;
    }

    // Param is passed by value, moved
    pub fn set_units(&mut self, v: u32) {
        self.units = v;
    }

    // uint32 expiry = 3;


    pub fn get_expiry(&self) -> u32 {
        self.expiry
    }
    pub fn clear_expiry(&mut self) {
        self.expiry = 0;
    }

    // Param is passed by value, moved
    pub fn set_expiry(&mut self, v: u32) {
        self.expiry = v;
    }
}

impl ::protobuf::Message for StorageRentEventBody {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.payer)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.units = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.expiry = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.payer.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.payer);
        }
        if self.units != 0 {
            my_size += ::protobuf::rt::value_size(2, self.units, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.expiry != 0 {
            my_size += ::protobuf::rt::value_size(3, self.expiry, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.payer.is_empty() {
            os.write_bytes(1, &self.payer)?;
        }
        if self.units != 0 {
            os.write_uint32(2, self.units)?;
        }
        if self.expiry != 0 {
            os.write_uint32(3, self.expiry)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> StorageRentEventBody {
        StorageRentEventBody::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "payer",
                |m: &StorageRentEventBody| { &m.payer },
                |m: &mut StorageRentEventBody| { &mut m.payer },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "units",
                |m: &StorageRentEventBody| { &m.units },
                |m: &mut StorageRentEventBody| { &mut m.units },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "expiry",
                |m: &StorageRentEventBody| { &m.expiry },
                |m: &mut StorageRentEventBody| { &mut m.expiry },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<StorageRentEventBody>(
                "StorageRentEventBody",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static StorageRentEventBody {
        static instance: ::protobuf::rt::LazyV2<StorageRentEventBody> = ::protobuf::rt::LazyV2::INIT;
        instance.get(StorageRentEventBody::new)
    }
}

impl ::protobuf::Clear for StorageRentEventBody {
    fn clear(&mut self) {
        self.payer.clear();
        self.units = 0;
        self.expiry = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for StorageRentEventBody {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StorageRentEventBody {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum OnChainEventType {
    EVENT_TYPE_NONE = 0,
    EVENT_TYPE_SIGNER = 1,
    EVENT_TYPE_SIGNER_MIGRATED = 2,
    EVENT_TYPE_ID_REGISTER = 3,
    EVENT_TYPE_STORAGE_RENT = 4,
}

impl ::protobuf::ProtobufEnum for OnChainEventType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<OnChainEventType> {
        match value {
            0 => ::std::option::Option::Some(OnChainEventType::EVENT_TYPE_NONE),
            1 => ::std::option::Option::Some(OnChainEventType::EVENT_TYPE_SIGNER),
            2 => ::std::option::Option::Some(OnChainEventType::EVENT_TYPE_SIGNER_MIGRATED),
            3 => ::std::option::Option::Some(OnChainEventType::EVENT_TYPE_ID_REGISTER),
            4 => ::std::option::Option::Some(OnChainEventType::EVENT_TYPE_STORAGE_RENT),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [OnChainEventType] = &[
            OnChainEventType::EVENT_TYPE_NONE,
            OnChainEventType::EVENT_TYPE_SIGNER,
            OnChainEventType::EVENT_TYPE_SIGNER_MIGRATED,
            OnChainEventType::EVENT_TYPE_ID_REGISTER,
            OnChainEventType::EVENT_TYPE_STORAGE_RENT,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<OnChainEventType>("OnChainEventType", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for OnChainEventType {
}

impl ::std::default::Default for OnChainEventType {
    fn default() -> Self {
        OnChainEventType::EVENT_TYPE_NONE
    }
}

impl ::protobuf::reflect::ProtobufValue for OnChainEventType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum SignerEventType {
    SIGNER_EVENT_TYPE_NONE = 0,
    SIGNER_EVENT_TYPE_ADD = 1,
    SIGNER_EVENT_TYPE_REMOVE = 2,
    SIGNER_EVENT_TYPE_ADMIN_RESET = 3,
}

impl ::protobuf::ProtobufEnum for SignerEventType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<SignerEventType> {
        match value {
            0 => ::std::option::Option::Some(SignerEventType::SIGNER_EVENT_TYPE_NONE),
            1 => ::std::option::Option::Some(SignerEventType::SIGNER_EVENT_TYPE_ADD),
            2 => ::std::option::Option::Some(SignerEventType::SIGNER_EVENT_TYPE_REMOVE),
            3 => ::std::option::Option::Some(SignerEventType::SIGNER_EVENT_TYPE_ADMIN_RESET),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [SignerEventType] = &[
            SignerEventType::SIGNER_EVENT_TYPE_NONE,
            SignerEventType::SIGNER_EVENT_TYPE_ADD,
            SignerEventType::SIGNER_EVENT_TYPE_REMOVE,
            SignerEventType::SIGNER_EVENT_TYPE_ADMIN_RESET,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<SignerEventType>("SignerEventType", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for SignerEventType {
}

impl ::std::default::Default for SignerEventType {
    fn default() -> Self {
        SignerEventType::SIGNER_EVENT_TYPE_NONE
    }
}

impl ::protobuf::reflect::ProtobufValue for SignerEventType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum IdRegisterEventType {
    ID_REGISTER_EVENT_TYPE_NONE = 0,
    ID_REGISTER_EVENT_TYPE_REGISTER = 1,
    ID_REGISTER_EVENT_TYPE_TRANSFER = 2,
    ID_REGISTER_EVENT_TYPE_CHANGE_RECOVERY = 3,
}

impl ::protobuf::ProtobufEnum for IdRegisterEventType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<IdRegisterEventType> {
        match value {
            0 => ::std::option::Option::Some(IdRegisterEventType::ID_REGISTER_EVENT_TYPE_NONE),
            1 => ::std::option::Option::Some(IdRegisterEventType::ID_REGISTER_EVENT_TYPE_REGISTER),
            2 => ::std::option::Option::Some(IdRegisterEventType::ID_REGISTER_EVENT_TYPE_TRANSFER),
            3 => ::std::option::Option::Some(IdRegisterEventType::ID_REGISTER_EVENT_TYPE_CHANGE_RECOVERY),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [IdRegisterEventType] = &[
            IdRegisterEventType::ID_REGISTER_EVENT_TYPE_NONE,
            IdRegisterEventType::ID_REGISTER_EVENT_TYPE_REGISTER,
            IdRegisterEventType::ID_REGISTER_EVENT_TYPE_TRANSFER,
            IdRegisterEventType::ID_REGISTER_EVENT_TYPE_CHANGE_RECOVERY,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<IdRegisterEventType>("IdRegisterEventType", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for IdRegisterEventType {
}

impl ::std::default::Default for IdRegisterEventType {
    fn default() -> Self {
        IdRegisterEventType::ID_REGISTER_EVENT_TYPE_NONE
    }
}

impl ::protobuf::reflect::ProtobufValue for IdRegisterEventType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x13onchain_event.proto\"\xa6\x05\n\x0cOnChainEvent\x12'\n\x04type\x18\
    \x01\x20\x01(\x0e2\x11.OnChainEventTypeR\x04typeB\0\x12\x1b\n\x08chain_i\
    d\x18\x02\x20\x01(\rR\x07chainIdB\0\x12#\n\x0cblock_number\x18\x03\x20\
    \x01(\rR\x0bblockNumberB\0\x12\x1f\n\nblock_hash\x18\x04\x20\x01(\x0cR\t\
    blockHashB\0\x12)\n\x0fblock_timestamp\x18\x05\x20\x01(\x04R\x0eblockTim\
    estampB\0\x12+\n\x10transaction_hash\x18\x06\x20\x01(\x0cR\x0ftransactio\
    nHashB\0\x12\x1d\n\tlog_index\x18\x07\x20\x01(\rR\x08logIndexB\0\x12\x12\
    \n\x03fid\x18\x08\x20\x01(\x04R\x03fidB\0\x12@\n\x11signer_event_body\
    \x18\t\x20\x01(\x0b2\x10.SignerEventBodyH\0R\x0fsignerEventBodyB\0\x12Y\
    \n\x1asigner_migrated_event_body\x18\n\x20\x01(\x0b2\x18.SignerMigratedE\
    ventBodyH\0R\x17signerMigratedEventBodyB\0\x12M\n\x16id_register_event_b\
    ody\x18\x0b\x20\x01(\x0b2\x14.IdRegisterEventBodyH\0R\x13idRegisterEvent\
    BodyB\0\x12P\n\x17storage_rent_event_body\x18\x0c\x20\x01(\x0b2\x15.Stor\
    ageRentEventBodyH\0R\x14storageRentEventBodyB\0\x12\x1b\n\x08tx_index\
    \x18\r\x20\x01(\rR\x07txIndexB\0\x12\x1a\n\x07version\x18\x0e\x20\x01(\r\
    R\x07versionB\0B\x06\n\x04body:\0\"\xbc\x01\n\x0fSignerEventBody\x12\x12\
    \n\x03key\x18\x01\x20\x01(\x0cR\x03keyB\0\x12\x1b\n\x08key_type\x18\x02\
    \x20\x01(\rR\x07keyTypeB\0\x121\n\nevent_type\x18\x03\x20\x01(\x0e2\x10.\
    SignerEventTypeR\teventTypeB\0\x12\x1c\n\x08metadata\x18\x04\x20\x01(\
    \x0cR\x08metadataB\0\x12%\n\rmetadata_type\x18\x05\x20\x01(\rR\x0cmetada\
    taTypeB\0:\0\"=\n\x17SignerMigratedEventBody\x12\x20\n\nmigratedAt\x18\
    \x01\x20\x01(\rR\nmigratedAtB\0:\0\"\xa3\x01\n\x13IdRegisterEventBody\
    \x12\x10\n\x02to\x18\x01\x20\x01(\x0cR\x02toB\0\x125\n\nevent_type\x18\
    \x02\x20\x01(\x0e2\x14.IdRegisterEventTypeR\teventTypeB\0\x12\x14\n\x04f\
    rom\x18\x03\x20\x01(\x0cR\x04fromB\0\x12+\n\x10recovery_address\x18\x04\
    \x20\x01(\x0cR\x0frecoveryAddressB\0:\0\"b\n\x14StorageRentEventBody\x12\
    \x16\n\x05payer\x18\x01\x20\x01(\x0cR\x05payerB\0\x12\x16\n\x05units\x18\
    \x02\x20\x01(\rR\x05unitsB\0\x12\x18\n\x06expiry\x18\x03\x20\x01(\rR\x06\
    expiryB\0:\0*\x99\x01\n\x10OnChainEventType\x12\x13\n\x0fEVENT_TYPE_NONE\
    \x10\0\x12\x15\n\x11EVENT_TYPE_SIGNER\x10\x01\x12\x1e\n\x1aEVENT_TYPE_SI\
    GNER_MIGRATED\x10\x02\x12\x1a\n\x16EVENT_TYPE_ID_REGISTER\x10\x03\x12\
    \x1b\n\x17EVENT_TYPE_STORAGE_RENT\x10\x04\x1a\0*\x8b\x01\n\x0fSignerEven\
    tType\x12\x1a\n\x16SIGNER_EVENT_TYPE_NONE\x10\0\x12\x19\n\x15SIGNER_EVEN\
    T_TYPE_ADD\x10\x01\x12\x1c\n\x18SIGNER_EVENT_TYPE_REMOVE\x10\x02\x12!\n\
    \x1dSIGNER_EVENT_TYPE_ADMIN_RESET\x10\x03\x1a\0*\xae\x01\n\x13IdRegister\
    EventType\x12\x1f\n\x1bID_REGISTER_EVENT_TYPE_NONE\x10\0\x12#\n\x1fID_RE\
    GISTER_EVENT_TYPE_REGISTER\x10\x01\x12#\n\x1fID_REGISTER_EVENT_TYPE_TRAN\
    SFER\x10\x02\x12*\n&ID_REGISTER_EVENT_TYPE_CHANGE_RECOVERY\x10\x03\x1a\0\
    B\0b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
