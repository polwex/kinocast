// This file is generated by rust-protobuf 2.28.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `hub_state.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_28_0;

#[derive(PartialEq,Clone,Default)]
pub struct ValidateOrRevokeJobState {
    // message fields
    pub last_job_timestamp: u32,
    pub last_fid: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ValidateOrRevokeJobState {
    fn default() -> &'a ValidateOrRevokeJobState {
        <ValidateOrRevokeJobState as ::protobuf::Message>::default_instance()
    }
}

impl ValidateOrRevokeJobState {
    pub fn new() -> ValidateOrRevokeJobState {
        ::std::default::Default::default()
    }

    // uint32 last_job_timestamp = 1;


    pub fn get_last_job_timestamp(&self) -> u32 {
        self.last_job_timestamp
    }
    pub fn clear_last_job_timestamp(&mut self) {
        self.last_job_timestamp = 0;
    }

    // Param is passed by value, moved
    pub fn set_last_job_timestamp(&mut self, v: u32) {
        self.last_job_timestamp = v;
    }

    // uint32 last_fid = 2;


    pub fn get_last_fid(&self) -> u32 {
        self.last_fid
    }
    pub fn clear_last_fid(&mut self) {
        self.last_fid = 0;
    }

    // Param is passed by value, moved
    pub fn set_last_fid(&mut self, v: u32) {
        self.last_fid = v;
    }
}

impl ::protobuf::Message for ValidateOrRevokeJobState {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.last_job_timestamp = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.last_fid = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.last_job_timestamp != 0 {
            my_size += ::protobuf::rt::value_size(1, self.last_job_timestamp, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.last_fid != 0 {
            my_size += ::protobuf::rt::value_size(2, self.last_fid, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.last_job_timestamp != 0 {
            os.write_uint32(1, self.last_job_timestamp)?;
        }
        if self.last_fid != 0 {
            os.write_uint32(2, self.last_fid)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ValidateOrRevokeJobState {
        ValidateOrRevokeJobState::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "last_job_timestamp",
                |m: &ValidateOrRevokeJobState| { &m.last_job_timestamp },
                |m: &mut ValidateOrRevokeJobState| { &mut m.last_job_timestamp },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "last_fid",
                |m: &ValidateOrRevokeJobState| { &m.last_fid },
                |m: &mut ValidateOrRevokeJobState| { &mut m.last_fid },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ValidateOrRevokeJobState>(
                "ValidateOrRevokeJobState",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ValidateOrRevokeJobState {
        static instance: ::protobuf::rt::LazyV2<ValidateOrRevokeJobState> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ValidateOrRevokeJobState::new)
    }
}

impl ::protobuf::Clear for ValidateOrRevokeJobState {
    fn clear(&mut self) {
        self.last_job_timestamp = 0;
        self.last_fid = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ValidateOrRevokeJobState {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ValidateOrRevokeJobState {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct HubState {
    // message fields
    pub last_fname_proof: u64,
    pub last_l2_block: u64,
    pub validate_or_revoke_state: ::protobuf::SingularPtrField<ValidateOrRevokeJobState>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a HubState {
    fn default() -> &'a HubState {
        <HubState as ::protobuf::Message>::default_instance()
    }
}

impl HubState {
    pub fn new() -> HubState {
        ::std::default::Default::default()
    }

    // uint64 last_fname_proof = 2;


    pub fn get_last_fname_proof(&self) -> u64 {
        self.last_fname_proof
    }
    pub fn clear_last_fname_proof(&mut self) {
        self.last_fname_proof = 0;
    }

    // Param is passed by value, moved
    pub fn set_last_fname_proof(&mut self, v: u64) {
        self.last_fname_proof = v;
    }

    // uint64 last_l2_block = 3;


    pub fn get_last_l2_block(&self) -> u64 {
        self.last_l2_block
    }
    pub fn clear_last_l2_block(&mut self) {
        self.last_l2_block = 0;
    }

    // Param is passed by value, moved
    pub fn set_last_l2_block(&mut self, v: u64) {
        self.last_l2_block = v;
    }

    // .ValidateOrRevokeJobState validate_or_revoke_state = 5;


    pub fn get_validate_or_revoke_state(&self) -> &ValidateOrRevokeJobState {
        self.validate_or_revoke_state.as_ref().unwrap_or_else(|| <ValidateOrRevokeJobState as ::protobuf::Message>::default_instance())
    }
    pub fn clear_validate_or_revoke_state(&mut self) {
        self.validate_or_revoke_state.clear();
    }

    pub fn has_validate_or_revoke_state(&self) -> bool {
        self.validate_or_revoke_state.is_some()
    }

    // Param is passed by value, moved
    pub fn set_validate_or_revoke_state(&mut self, v: ValidateOrRevokeJobState) {
        self.validate_or_revoke_state = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_validate_or_revoke_state(&mut self) -> &mut ValidateOrRevokeJobState {
        if self.validate_or_revoke_state.is_none() {
            self.validate_or_revoke_state.set_default();
        }
        self.validate_or_revoke_state.as_mut().unwrap()
    }

    // Take field
    pub fn take_validate_or_revoke_state(&mut self) -> ValidateOrRevokeJobState {
        self.validate_or_revoke_state.take().unwrap_or_else(|| ValidateOrRevokeJobState::new())
    }
}

impl ::protobuf::Message for HubState {
    fn is_initialized(&self) -> bool {
        for v in &self.validate_or_revoke_state {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.last_fname_proof = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.last_l2_block = tmp;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.validate_or_revoke_state)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.last_fname_proof != 0 {
            my_size += ::protobuf::rt::value_size(2, self.last_fname_proof, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.last_l2_block != 0 {
            my_size += ::protobuf::rt::value_size(3, self.last_l2_block, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.validate_or_revoke_state.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.last_fname_proof != 0 {
            os.write_uint64(2, self.last_fname_proof)?;
        }
        if self.last_l2_block != 0 {
            os.write_uint64(3, self.last_l2_block)?;
        }
        if let Some(ref v) = self.validate_or_revoke_state.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> HubState {
        HubState::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "last_fname_proof",
                |m: &HubState| { &m.last_fname_proof },
                |m: &mut HubState| { &mut m.last_fname_proof },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "last_l2_block",
                |m: &HubState| { &m.last_l2_block },
                |m: &mut HubState| { &mut m.last_l2_block },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ValidateOrRevokeJobState>>(
                "validate_or_revoke_state",
                |m: &HubState| { &m.validate_or_revoke_state },
                |m: &mut HubState| { &mut m.validate_or_revoke_state },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<HubState>(
                "HubState",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static HubState {
        static instance: ::protobuf::rt::LazyV2<HubState> = ::protobuf::rt::LazyV2::INIT;
        instance.get(HubState::new)
    }
}

impl ::protobuf::Clear for HubState {
    fn clear(&mut self) {
        self.last_fname_proof = 0;
        self.last_l2_block = 0;
        self.validate_or_revoke_state.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for HubState {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HubState {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0fhub_state.proto\"i\n\x18ValidateOrRevokeJobState\x12.\n\x12last_jo\
    b_timestamp\x18\x01\x20\x01(\rR\x10lastJobTimestampB\0\x12\x1b\n\x08last\
    _fid\x18\x02\x20\x01(\rR\x07lastFidB\0:\0\"\xb4\x01\n\x08HubState\x12*\n\
    \x10last_fname_proof\x18\x02\x20\x01(\x04R\x0elastFnameProofB\0\x12$\n\r\
    last_l2_block\x18\x03\x20\x01(\x04R\x0blastL2BlockB\0\x12T\n\x18validate\
    _or_revoke_state\x18\x05\x20\x01(\x0b2\x19.ValidateOrRevokeJobStateR\x15\
    validateOrRevokeStateB\0:\0B\0b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
