// This file is generated by rust-protobuf 2.28.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `hub_event.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_28_0;

#[derive(PartialEq,Clone,Default)]
pub struct MergeMessageBody {
    // message fields
    pub message: ::protobuf::SingularPtrField<super::message::Message>,
    pub deleted_messages: ::protobuf::RepeatedField<super::message::Message>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MergeMessageBody {
    fn default() -> &'a MergeMessageBody {
        <MergeMessageBody as ::protobuf::Message>::default_instance()
    }
}

impl MergeMessageBody {
    pub fn new() -> MergeMessageBody {
        ::std::default::Default::default()
    }

    // .Message message = 1;


    pub fn get_message(&self) -> &super::message::Message {
        self.message.as_ref().unwrap_or_else(|| <super::message::Message as ::protobuf::Message>::default_instance())
    }
    pub fn clear_message(&mut self) {
        self.message.clear();
    }

    pub fn has_message(&self) -> bool {
        self.message.is_some()
    }

    // Param is passed by value, moved
    pub fn set_message(&mut self, v: super::message::Message) {
        self.message = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_message(&mut self) -> &mut super::message::Message {
        if self.message.is_none() {
            self.message.set_default();
        }
        self.message.as_mut().unwrap()
    }

    // Take field
    pub fn take_message(&mut self) -> super::message::Message {
        self.message.take().unwrap_or_else(|| super::message::Message::new())
    }

    // repeated .Message deleted_messages = 2;


    pub fn get_deleted_messages(&self) -> &[super::message::Message] {
        &self.deleted_messages
    }
    pub fn clear_deleted_messages(&mut self) {
        self.deleted_messages.clear();
    }

    // Param is passed by value, moved
    pub fn set_deleted_messages(&mut self, v: ::protobuf::RepeatedField<super::message::Message>) {
        self.deleted_messages = v;
    }

    // Mutable pointer to the field.
    pub fn mut_deleted_messages(&mut self) -> &mut ::protobuf::RepeatedField<super::message::Message> {
        &mut self.deleted_messages
    }

    // Take field
    pub fn take_deleted_messages(&mut self) -> ::protobuf::RepeatedField<super::message::Message> {
        ::std::mem::replace(&mut self.deleted_messages, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for MergeMessageBody {
    fn is_initialized(&self) -> bool {
        for v in &self.message {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.deleted_messages {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.message)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.deleted_messages)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.message.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.deleted_messages {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.message.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.deleted_messages {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MergeMessageBody {
        MergeMessageBody::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::message::Message>>(
                "message",
                |m: &MergeMessageBody| { &m.message },
                |m: &mut MergeMessageBody| { &mut m.message },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::message::Message>>(
                "deleted_messages",
                |m: &MergeMessageBody| { &m.deleted_messages },
                |m: &mut MergeMessageBody| { &mut m.deleted_messages },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MergeMessageBody>(
                "MergeMessageBody",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MergeMessageBody {
        static instance: ::protobuf::rt::LazyV2<MergeMessageBody> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MergeMessageBody::new)
    }
}

impl ::protobuf::Clear for MergeMessageBody {
    fn clear(&mut self) {
        self.message.clear();
        self.deleted_messages.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MergeMessageBody {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MergeMessageBody {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PruneMessageBody {
    // message fields
    pub message: ::protobuf::SingularPtrField<super::message::Message>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PruneMessageBody {
    fn default() -> &'a PruneMessageBody {
        <PruneMessageBody as ::protobuf::Message>::default_instance()
    }
}

impl PruneMessageBody {
    pub fn new() -> PruneMessageBody {
        ::std::default::Default::default()
    }

    // .Message message = 1;


    pub fn get_message(&self) -> &super::message::Message {
        self.message.as_ref().unwrap_or_else(|| <super::message::Message as ::protobuf::Message>::default_instance())
    }
    pub fn clear_message(&mut self) {
        self.message.clear();
    }

    pub fn has_message(&self) -> bool {
        self.message.is_some()
    }

    // Param is passed by value, moved
    pub fn set_message(&mut self, v: super::message::Message) {
        self.message = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_message(&mut self) -> &mut super::message::Message {
        if self.message.is_none() {
            self.message.set_default();
        }
        self.message.as_mut().unwrap()
    }

    // Take field
    pub fn take_message(&mut self) -> super::message::Message {
        self.message.take().unwrap_or_else(|| super::message::Message::new())
    }
}

impl ::protobuf::Message for PruneMessageBody {
    fn is_initialized(&self) -> bool {
        for v in &self.message {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.message)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.message.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.message.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PruneMessageBody {
        PruneMessageBody::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::message::Message>>(
                "message",
                |m: &PruneMessageBody| { &m.message },
                |m: &mut PruneMessageBody| { &mut m.message },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<PruneMessageBody>(
                "PruneMessageBody",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static PruneMessageBody {
        static instance: ::protobuf::rt::LazyV2<PruneMessageBody> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PruneMessageBody::new)
    }
}

impl ::protobuf::Clear for PruneMessageBody {
    fn clear(&mut self) {
        self.message.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PruneMessageBody {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PruneMessageBody {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RevokeMessageBody {
    // message fields
    pub message: ::protobuf::SingularPtrField<super::message::Message>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RevokeMessageBody {
    fn default() -> &'a RevokeMessageBody {
        <RevokeMessageBody as ::protobuf::Message>::default_instance()
    }
}

impl RevokeMessageBody {
    pub fn new() -> RevokeMessageBody {
        ::std::default::Default::default()
    }

    // .Message message = 1;


    pub fn get_message(&self) -> &super::message::Message {
        self.message.as_ref().unwrap_or_else(|| <super::message::Message as ::protobuf::Message>::default_instance())
    }
    pub fn clear_message(&mut self) {
        self.message.clear();
    }

    pub fn has_message(&self) -> bool {
        self.message.is_some()
    }

    // Param is passed by value, moved
    pub fn set_message(&mut self, v: super::message::Message) {
        self.message = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_message(&mut self) -> &mut super::message::Message {
        if self.message.is_none() {
            self.message.set_default();
        }
        self.message.as_mut().unwrap()
    }

    // Take field
    pub fn take_message(&mut self) -> super::message::Message {
        self.message.take().unwrap_or_else(|| super::message::Message::new())
    }
}

impl ::protobuf::Message for RevokeMessageBody {
    fn is_initialized(&self) -> bool {
        for v in &self.message {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.message)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.message.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.message.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RevokeMessageBody {
        RevokeMessageBody::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::message::Message>>(
                "message",
                |m: &RevokeMessageBody| { &m.message },
                |m: &mut RevokeMessageBody| { &mut m.message },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RevokeMessageBody>(
                "RevokeMessageBody",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RevokeMessageBody {
        static instance: ::protobuf::rt::LazyV2<RevokeMessageBody> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RevokeMessageBody::new)
    }
}

impl ::protobuf::Clear for RevokeMessageBody {
    fn clear(&mut self) {
        self.message.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RevokeMessageBody {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RevokeMessageBody {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MergeOnChainEventBody {
    // message fields
    pub on_chain_event: ::protobuf::SingularPtrField<super::onchain_event::OnChainEvent>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MergeOnChainEventBody {
    fn default() -> &'a MergeOnChainEventBody {
        <MergeOnChainEventBody as ::protobuf::Message>::default_instance()
    }
}

impl MergeOnChainEventBody {
    pub fn new() -> MergeOnChainEventBody {
        ::std::default::Default::default()
    }

    // .OnChainEvent on_chain_event = 1;


    pub fn get_on_chain_event(&self) -> &super::onchain_event::OnChainEvent {
        self.on_chain_event.as_ref().unwrap_or_else(|| <super::onchain_event::OnChainEvent as ::protobuf::Message>::default_instance())
    }
    pub fn clear_on_chain_event(&mut self) {
        self.on_chain_event.clear();
    }

    pub fn has_on_chain_event(&self) -> bool {
        self.on_chain_event.is_some()
    }

    // Param is passed by value, moved
    pub fn set_on_chain_event(&mut self, v: super::onchain_event::OnChainEvent) {
        self.on_chain_event = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_on_chain_event(&mut self) -> &mut super::onchain_event::OnChainEvent {
        if self.on_chain_event.is_none() {
            self.on_chain_event.set_default();
        }
        self.on_chain_event.as_mut().unwrap()
    }

    // Take field
    pub fn take_on_chain_event(&mut self) -> super::onchain_event::OnChainEvent {
        self.on_chain_event.take().unwrap_or_else(|| super::onchain_event::OnChainEvent::new())
    }
}

impl ::protobuf::Message for MergeOnChainEventBody {
    fn is_initialized(&self) -> bool {
        for v in &self.on_chain_event {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.on_chain_event)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.on_chain_event.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.on_chain_event.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MergeOnChainEventBody {
        MergeOnChainEventBody::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::onchain_event::OnChainEvent>>(
                "on_chain_event",
                |m: &MergeOnChainEventBody| { &m.on_chain_event },
                |m: &mut MergeOnChainEventBody| { &mut m.on_chain_event },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MergeOnChainEventBody>(
                "MergeOnChainEventBody",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MergeOnChainEventBody {
        static instance: ::protobuf::rt::LazyV2<MergeOnChainEventBody> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MergeOnChainEventBody::new)
    }
}

impl ::protobuf::Clear for MergeOnChainEventBody {
    fn clear(&mut self) {
        self.on_chain_event.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MergeOnChainEventBody {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MergeOnChainEventBody {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MergeUserNameProofBody {
    // message fields
    pub username_proof: ::protobuf::SingularPtrField<super::username_proof::UserNameProof>,
    pub deleted_username_proof: ::protobuf::SingularPtrField<super::username_proof::UserNameProof>,
    pub username_proof_message: ::protobuf::SingularPtrField<super::message::Message>,
    pub deleted_username_proof_message: ::protobuf::SingularPtrField<super::message::Message>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MergeUserNameProofBody {
    fn default() -> &'a MergeUserNameProofBody {
        <MergeUserNameProofBody as ::protobuf::Message>::default_instance()
    }
}

impl MergeUserNameProofBody {
    pub fn new() -> MergeUserNameProofBody {
        ::std::default::Default::default()
    }

    // .UserNameProof username_proof = 1;


    pub fn get_username_proof(&self) -> &super::username_proof::UserNameProof {
        self.username_proof.as_ref().unwrap_or_else(|| <super::username_proof::UserNameProof as ::protobuf::Message>::default_instance())
    }
    pub fn clear_username_proof(&mut self) {
        self.username_proof.clear();
    }

    pub fn has_username_proof(&self) -> bool {
        self.username_proof.is_some()
    }

    // Param is passed by value, moved
    pub fn set_username_proof(&mut self, v: super::username_proof::UserNameProof) {
        self.username_proof = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_username_proof(&mut self) -> &mut super::username_proof::UserNameProof {
        if self.username_proof.is_none() {
            self.username_proof.set_default();
        }
        self.username_proof.as_mut().unwrap()
    }

    // Take field
    pub fn take_username_proof(&mut self) -> super::username_proof::UserNameProof {
        self.username_proof.take().unwrap_or_else(|| super::username_proof::UserNameProof::new())
    }

    // .UserNameProof deleted_username_proof = 2;


    pub fn get_deleted_username_proof(&self) -> &super::username_proof::UserNameProof {
        self.deleted_username_proof.as_ref().unwrap_or_else(|| <super::username_proof::UserNameProof as ::protobuf::Message>::default_instance())
    }
    pub fn clear_deleted_username_proof(&mut self) {
        self.deleted_username_proof.clear();
    }

    pub fn has_deleted_username_proof(&self) -> bool {
        self.deleted_username_proof.is_some()
    }

    // Param is passed by value, moved
    pub fn set_deleted_username_proof(&mut self, v: super::username_proof::UserNameProof) {
        self.deleted_username_proof = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_deleted_username_proof(&mut self) -> &mut super::username_proof::UserNameProof {
        if self.deleted_username_proof.is_none() {
            self.deleted_username_proof.set_default();
        }
        self.deleted_username_proof.as_mut().unwrap()
    }

    // Take field
    pub fn take_deleted_username_proof(&mut self) -> super::username_proof::UserNameProof {
        self.deleted_username_proof.take().unwrap_or_else(|| super::username_proof::UserNameProof::new())
    }

    // .Message username_proof_message = 3;


    pub fn get_username_proof_message(&self) -> &super::message::Message {
        self.username_proof_message.as_ref().unwrap_or_else(|| <super::message::Message as ::protobuf::Message>::default_instance())
    }
    pub fn clear_username_proof_message(&mut self) {
        self.username_proof_message.clear();
    }

    pub fn has_username_proof_message(&self) -> bool {
        self.username_proof_message.is_some()
    }

    // Param is passed by value, moved
    pub fn set_username_proof_message(&mut self, v: super::message::Message) {
        self.username_proof_message = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_username_proof_message(&mut self) -> &mut super::message::Message {
        if self.username_proof_message.is_none() {
            self.username_proof_message.set_default();
        }
        self.username_proof_message.as_mut().unwrap()
    }

    // Take field
    pub fn take_username_proof_message(&mut self) -> super::message::Message {
        self.username_proof_message.take().unwrap_or_else(|| super::message::Message::new())
    }

    // .Message deleted_username_proof_message = 4;


    pub fn get_deleted_username_proof_message(&self) -> &super::message::Message {
        self.deleted_username_proof_message.as_ref().unwrap_or_else(|| <super::message::Message as ::protobuf::Message>::default_instance())
    }
    pub fn clear_deleted_username_proof_message(&mut self) {
        self.deleted_username_proof_message.clear();
    }

    pub fn has_deleted_username_proof_message(&self) -> bool {
        self.deleted_username_proof_message.is_some()
    }

    // Param is passed by value, moved
    pub fn set_deleted_username_proof_message(&mut self, v: super::message::Message) {
        self.deleted_username_proof_message = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_deleted_username_proof_message(&mut self) -> &mut super::message::Message {
        if self.deleted_username_proof_message.is_none() {
            self.deleted_username_proof_message.set_default();
        }
        self.deleted_username_proof_message.as_mut().unwrap()
    }

    // Take field
    pub fn take_deleted_username_proof_message(&mut self) -> super::message::Message {
        self.deleted_username_proof_message.take().unwrap_or_else(|| super::message::Message::new())
    }
}

impl ::protobuf::Message for MergeUserNameProofBody {
    fn is_initialized(&self) -> bool {
        for v in &self.username_proof {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.deleted_username_proof {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.username_proof_message {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.deleted_username_proof_message {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.username_proof)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.deleted_username_proof)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.username_proof_message)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.deleted_username_proof_message)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.username_proof.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.deleted_username_proof.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.username_proof_message.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.deleted_username_proof_message.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.username_proof.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.deleted_username_proof.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.username_proof_message.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.deleted_username_proof_message.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MergeUserNameProofBody {
        MergeUserNameProofBody::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::username_proof::UserNameProof>>(
                "username_proof",
                |m: &MergeUserNameProofBody| { &m.username_proof },
                |m: &mut MergeUserNameProofBody| { &mut m.username_proof },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::username_proof::UserNameProof>>(
                "deleted_username_proof",
                |m: &MergeUserNameProofBody| { &m.deleted_username_proof },
                |m: &mut MergeUserNameProofBody| { &mut m.deleted_username_proof },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::message::Message>>(
                "username_proof_message",
                |m: &MergeUserNameProofBody| { &m.username_proof_message },
                |m: &mut MergeUserNameProofBody| { &mut m.username_proof_message },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::message::Message>>(
                "deleted_username_proof_message",
                |m: &MergeUserNameProofBody| { &m.deleted_username_proof_message },
                |m: &mut MergeUserNameProofBody| { &mut m.deleted_username_proof_message },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MergeUserNameProofBody>(
                "MergeUserNameProofBody",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MergeUserNameProofBody {
        static instance: ::protobuf::rt::LazyV2<MergeUserNameProofBody> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MergeUserNameProofBody::new)
    }
}

impl ::protobuf::Clear for MergeUserNameProofBody {
    fn clear(&mut self) {
        self.username_proof.clear();
        self.deleted_username_proof.clear();
        self.username_proof_message.clear();
        self.deleted_username_proof_message.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MergeUserNameProofBody {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MergeUserNameProofBody {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct HubEvent {
    // message fields
    pub field_type: HubEventType,
    pub id: u64,
    // message oneof groups
    pub body: ::std::option::Option<HubEvent_oneof_body>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a HubEvent {
    fn default() -> &'a HubEvent {
        <HubEvent as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum HubEvent_oneof_body {
    merge_message_body(MergeMessageBody),
    prune_message_body(PruneMessageBody),
    revoke_message_body(RevokeMessageBody),
    merge_username_proof_body(MergeUserNameProofBody),
    merge_on_chain_event_body(MergeOnChainEventBody),
}

impl HubEvent {
    pub fn new() -> HubEvent {
        ::std::default::Default::default()
    }

    // .HubEventType type = 1;


    pub fn get_field_type(&self) -> HubEventType {
        self.field_type
    }
    pub fn clear_field_type(&mut self) {
        self.field_type = HubEventType::HUB_EVENT_TYPE_NONE;
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: HubEventType) {
        self.field_type = v;
    }

    // uint64 id = 2;


    pub fn get_id(&self) -> u64 {
        self.id
    }
    pub fn clear_id(&mut self) {
        self.id = 0;
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: u64) {
        self.id = v;
    }

    // .MergeMessageBody merge_message_body = 3;


    pub fn get_merge_message_body(&self) -> &MergeMessageBody {
        match self.body {
            ::std::option::Option::Some(HubEvent_oneof_body::merge_message_body(ref v)) => v,
            _ => <MergeMessageBody as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_merge_message_body(&mut self) {
        self.body = ::std::option::Option::None;
    }

    pub fn has_merge_message_body(&self) -> bool {
        match self.body {
            ::std::option::Option::Some(HubEvent_oneof_body::merge_message_body(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_merge_message_body(&mut self, v: MergeMessageBody) {
        self.body = ::std::option::Option::Some(HubEvent_oneof_body::merge_message_body(v))
    }

    // Mutable pointer to the field.
    pub fn mut_merge_message_body(&mut self) -> &mut MergeMessageBody {
        if let ::std::option::Option::Some(HubEvent_oneof_body::merge_message_body(_)) = self.body {
        } else {
            self.body = ::std::option::Option::Some(HubEvent_oneof_body::merge_message_body(MergeMessageBody::new()));
        }
        match self.body {
            ::std::option::Option::Some(HubEvent_oneof_body::merge_message_body(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_merge_message_body(&mut self) -> MergeMessageBody {
        if self.has_merge_message_body() {
            match self.body.take() {
                ::std::option::Option::Some(HubEvent_oneof_body::merge_message_body(v)) => v,
                _ => panic!(),
            }
        } else {
            MergeMessageBody::new()
        }
    }

    // .PruneMessageBody prune_message_body = 4;


    pub fn get_prune_message_body(&self) -> &PruneMessageBody {
        match self.body {
            ::std::option::Option::Some(HubEvent_oneof_body::prune_message_body(ref v)) => v,
            _ => <PruneMessageBody as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_prune_message_body(&mut self) {
        self.body = ::std::option::Option::None;
    }

    pub fn has_prune_message_body(&self) -> bool {
        match self.body {
            ::std::option::Option::Some(HubEvent_oneof_body::prune_message_body(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_prune_message_body(&mut self, v: PruneMessageBody) {
        self.body = ::std::option::Option::Some(HubEvent_oneof_body::prune_message_body(v))
    }

    // Mutable pointer to the field.
    pub fn mut_prune_message_body(&mut self) -> &mut PruneMessageBody {
        if let ::std::option::Option::Some(HubEvent_oneof_body::prune_message_body(_)) = self.body {
        } else {
            self.body = ::std::option::Option::Some(HubEvent_oneof_body::prune_message_body(PruneMessageBody::new()));
        }
        match self.body {
            ::std::option::Option::Some(HubEvent_oneof_body::prune_message_body(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_prune_message_body(&mut self) -> PruneMessageBody {
        if self.has_prune_message_body() {
            match self.body.take() {
                ::std::option::Option::Some(HubEvent_oneof_body::prune_message_body(v)) => v,
                _ => panic!(),
            }
        } else {
            PruneMessageBody::new()
        }
    }

    // .RevokeMessageBody revoke_message_body = 5;


    pub fn get_revoke_message_body(&self) -> &RevokeMessageBody {
        match self.body {
            ::std::option::Option::Some(HubEvent_oneof_body::revoke_message_body(ref v)) => v,
            _ => <RevokeMessageBody as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_revoke_message_body(&mut self) {
        self.body = ::std::option::Option::None;
    }

    pub fn has_revoke_message_body(&self) -> bool {
        match self.body {
            ::std::option::Option::Some(HubEvent_oneof_body::revoke_message_body(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_revoke_message_body(&mut self, v: RevokeMessageBody) {
        self.body = ::std::option::Option::Some(HubEvent_oneof_body::revoke_message_body(v))
    }

    // Mutable pointer to the field.
    pub fn mut_revoke_message_body(&mut self) -> &mut RevokeMessageBody {
        if let ::std::option::Option::Some(HubEvent_oneof_body::revoke_message_body(_)) = self.body {
        } else {
            self.body = ::std::option::Option::Some(HubEvent_oneof_body::revoke_message_body(RevokeMessageBody::new()));
        }
        match self.body {
            ::std::option::Option::Some(HubEvent_oneof_body::revoke_message_body(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_revoke_message_body(&mut self) -> RevokeMessageBody {
        if self.has_revoke_message_body() {
            match self.body.take() {
                ::std::option::Option::Some(HubEvent_oneof_body::revoke_message_body(v)) => v,
                _ => panic!(),
            }
        } else {
            RevokeMessageBody::new()
        }
    }

    // .MergeUserNameProofBody merge_username_proof_body = 8;


    pub fn get_merge_username_proof_body(&self) -> &MergeUserNameProofBody {
        match self.body {
            ::std::option::Option::Some(HubEvent_oneof_body::merge_username_proof_body(ref v)) => v,
            _ => <MergeUserNameProofBody as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_merge_username_proof_body(&mut self) {
        self.body = ::std::option::Option::None;
    }

    pub fn has_merge_username_proof_body(&self) -> bool {
        match self.body {
            ::std::option::Option::Some(HubEvent_oneof_body::merge_username_proof_body(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_merge_username_proof_body(&mut self, v: MergeUserNameProofBody) {
        self.body = ::std::option::Option::Some(HubEvent_oneof_body::merge_username_proof_body(v))
    }

    // Mutable pointer to the field.
    pub fn mut_merge_username_proof_body(&mut self) -> &mut MergeUserNameProofBody {
        if let ::std::option::Option::Some(HubEvent_oneof_body::merge_username_proof_body(_)) = self.body {
        } else {
            self.body = ::std::option::Option::Some(HubEvent_oneof_body::merge_username_proof_body(MergeUserNameProofBody::new()));
        }
        match self.body {
            ::std::option::Option::Some(HubEvent_oneof_body::merge_username_proof_body(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_merge_username_proof_body(&mut self) -> MergeUserNameProofBody {
        if self.has_merge_username_proof_body() {
            match self.body.take() {
                ::std::option::Option::Some(HubEvent_oneof_body::merge_username_proof_body(v)) => v,
                _ => panic!(),
            }
        } else {
            MergeUserNameProofBody::new()
        }
    }

    // .MergeOnChainEventBody merge_on_chain_event_body = 11;


    pub fn get_merge_on_chain_event_body(&self) -> &MergeOnChainEventBody {
        match self.body {
            ::std::option::Option::Some(HubEvent_oneof_body::merge_on_chain_event_body(ref v)) => v,
            _ => <MergeOnChainEventBody as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_merge_on_chain_event_body(&mut self) {
        self.body = ::std::option::Option::None;
    }

    pub fn has_merge_on_chain_event_body(&self) -> bool {
        match self.body {
            ::std::option::Option::Some(HubEvent_oneof_body::merge_on_chain_event_body(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_merge_on_chain_event_body(&mut self, v: MergeOnChainEventBody) {
        self.body = ::std::option::Option::Some(HubEvent_oneof_body::merge_on_chain_event_body(v))
    }

    // Mutable pointer to the field.
    pub fn mut_merge_on_chain_event_body(&mut self) -> &mut MergeOnChainEventBody {
        if let ::std::option::Option::Some(HubEvent_oneof_body::merge_on_chain_event_body(_)) = self.body {
        } else {
            self.body = ::std::option::Option::Some(HubEvent_oneof_body::merge_on_chain_event_body(MergeOnChainEventBody::new()));
        }
        match self.body {
            ::std::option::Option::Some(HubEvent_oneof_body::merge_on_chain_event_body(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_merge_on_chain_event_body(&mut self) -> MergeOnChainEventBody {
        if self.has_merge_on_chain_event_body() {
            match self.body.take() {
                ::std::option::Option::Some(HubEvent_oneof_body::merge_on_chain_event_body(v)) => v,
                _ => panic!(),
            }
        } else {
            MergeOnChainEventBody::new()
        }
    }
}

impl ::protobuf::Message for HubEvent {
    fn is_initialized(&self) -> bool {
        if let Some(HubEvent_oneof_body::merge_message_body(ref v)) = self.body {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(HubEvent_oneof_body::prune_message_body(ref v)) = self.body {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(HubEvent_oneof_body::revoke_message_body(ref v)) = self.body {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(HubEvent_oneof_body::merge_username_proof_body(ref v)) = self.body {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(HubEvent_oneof_body::merge_on_chain_event_body(ref v)) = self.body {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.field_type, 1, &mut self.unknown_fields)?
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.id = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.body = ::std::option::Option::Some(HubEvent_oneof_body::merge_message_body(is.read_message()?));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.body = ::std::option::Option::Some(HubEvent_oneof_body::prune_message_body(is.read_message()?));
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.body = ::std::option::Option::Some(HubEvent_oneof_body::revoke_message_body(is.read_message()?));
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.body = ::std::option::Option::Some(HubEvent_oneof_body::merge_username_proof_body(is.read_message()?));
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.body = ::std::option::Option::Some(HubEvent_oneof_body::merge_on_chain_event_body(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.field_type != HubEventType::HUB_EVENT_TYPE_NONE {
            my_size += ::protobuf::rt::enum_size(1, self.field_type);
        }
        if self.id != 0 {
            my_size += ::protobuf::rt::value_size(2, self.id, ::protobuf::wire_format::WireTypeVarint);
        }
        if let ::std::option::Option::Some(ref v) = self.body {
            match v {
                &HubEvent_oneof_body::merge_message_body(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &HubEvent_oneof_body::prune_message_body(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &HubEvent_oneof_body::revoke_message_body(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &HubEvent_oneof_body::merge_username_proof_body(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &HubEvent_oneof_body::merge_on_chain_event_body(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.field_type != HubEventType::HUB_EVENT_TYPE_NONE {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.field_type))?;
        }
        if self.id != 0 {
            os.write_uint64(2, self.id)?;
        }
        if let ::std::option::Option::Some(ref v) = self.body {
            match v {
                &HubEvent_oneof_body::merge_message_body(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &HubEvent_oneof_body::prune_message_body(ref v) => {
                    os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &HubEvent_oneof_body::revoke_message_body(ref v) => {
                    os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &HubEvent_oneof_body::merge_username_proof_body(ref v) => {
                    os.write_tag(8, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &HubEvent_oneof_body::merge_on_chain_event_body(ref v) => {
                    os.write_tag(11, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> HubEvent {
        HubEvent::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<HubEventType>>(
                "type",
                |m: &HubEvent| { &m.field_type },
                |m: &mut HubEvent| { &mut m.field_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "id",
                |m: &HubEvent| { &m.id },
                |m: &mut HubEvent| { &mut m.id },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, MergeMessageBody>(
                "merge_message_body",
                HubEvent::has_merge_message_body,
                HubEvent::get_merge_message_body,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, PruneMessageBody>(
                "prune_message_body",
                HubEvent::has_prune_message_body,
                HubEvent::get_prune_message_body,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, RevokeMessageBody>(
                "revoke_message_body",
                HubEvent::has_revoke_message_body,
                HubEvent::get_revoke_message_body,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, MergeUserNameProofBody>(
                "merge_username_proof_body",
                HubEvent::has_merge_username_proof_body,
                HubEvent::get_merge_username_proof_body,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, MergeOnChainEventBody>(
                "merge_on_chain_event_body",
                HubEvent::has_merge_on_chain_event_body,
                HubEvent::get_merge_on_chain_event_body,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<HubEvent>(
                "HubEvent",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static HubEvent {
        static instance: ::protobuf::rt::LazyV2<HubEvent> = ::protobuf::rt::LazyV2::INIT;
        instance.get(HubEvent::new)
    }
}

impl ::protobuf::Clear for HubEvent {
    fn clear(&mut self) {
        self.field_type = HubEventType::HUB_EVENT_TYPE_NONE;
        self.id = 0;
        self.body = ::std::option::Option::None;
        self.body = ::std::option::Option::None;
        self.body = ::std::option::Option::None;
        self.body = ::std::option::Option::None;
        self.body = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for HubEvent {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HubEvent {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum HubEventType {
    HUB_EVENT_TYPE_NONE = 0,
    HUB_EVENT_TYPE_MERGE_MESSAGE = 1,
    HUB_EVENT_TYPE_PRUNE_MESSAGE = 2,
    HUB_EVENT_TYPE_REVOKE_MESSAGE = 3,
    HUB_EVENT_TYPE_MERGE_USERNAME_PROOF = 6,
    HUB_EVENT_TYPE_MERGE_ON_CHAIN_EVENT = 9,
}

impl ::protobuf::ProtobufEnum for HubEventType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<HubEventType> {
        match value {
            0 => ::std::option::Option::Some(HubEventType::HUB_EVENT_TYPE_NONE),
            1 => ::std::option::Option::Some(HubEventType::HUB_EVENT_TYPE_MERGE_MESSAGE),
            2 => ::std::option::Option::Some(HubEventType::HUB_EVENT_TYPE_PRUNE_MESSAGE),
            3 => ::std::option::Option::Some(HubEventType::HUB_EVENT_TYPE_REVOKE_MESSAGE),
            6 => ::std::option::Option::Some(HubEventType::HUB_EVENT_TYPE_MERGE_USERNAME_PROOF),
            9 => ::std::option::Option::Some(HubEventType::HUB_EVENT_TYPE_MERGE_ON_CHAIN_EVENT),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [HubEventType] = &[
            HubEventType::HUB_EVENT_TYPE_NONE,
            HubEventType::HUB_EVENT_TYPE_MERGE_MESSAGE,
            HubEventType::HUB_EVENT_TYPE_PRUNE_MESSAGE,
            HubEventType::HUB_EVENT_TYPE_REVOKE_MESSAGE,
            HubEventType::HUB_EVENT_TYPE_MERGE_USERNAME_PROOF,
            HubEventType::HUB_EVENT_TYPE_MERGE_ON_CHAIN_EVENT,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<HubEventType>("HubEventType", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for HubEventType {
}

impl ::std::default::Default for HubEventType {
    fn default() -> Self {
        HubEventType::HUB_EVENT_TYPE_NONE
    }
}

impl ::protobuf::reflect::ProtobufValue for HubEventType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0fhub_event.proto\x1a\rmessage.proto\x1a\x13onchain_event.proto\x1a\
    \x14username_proof.proto\"q\n\x10MergeMessageBody\x12$\n\x07message\x18\
    \x01\x20\x01(\x0b2\x08.MessageR\x07messageB\0\x125\n\x10deleted_messages\
    \x18\x02\x20\x03(\x0b2\x08.MessageR\x0fdeletedMessagesB\0:\0\":\n\x10Pru\
    neMessageBody\x12$\n\x07message\x18\x01\x20\x01(\x0b2\x08.MessageR\x07me\
    ssageB\0:\0\";\n\x11RevokeMessageBody\x12$\n\x07message\x18\x01\x20\x01(\
    \x0b2\x08.MessageR\x07messageB\0:\0\"P\n\x15MergeOnChainEventBody\x125\n\
    \x0eon_chain_event\x18\x01\x20\x01(\x0b2\r.OnChainEventR\x0conChainEvent\
    B\0:\0\"\xae\x02\n\x16MergeUserNameProofBody\x127\n\x0eusername_proof\
    \x18\x01\x20\x01(\x0b2\x0e.UserNameProofR\rusernameProofB\0\x12F\n\x16de\
    leted_username_proof\x18\x02\x20\x01(\x0b2\x0e.UserNameProofR\x14deleted\
    UsernameProofB\0\x12@\n\x16username_proof_message\x18\x03\x20\x01(\x0b2\
    \x08.MessageR\x14usernameProofMessageB\0\x12O\n\x1edeleted_username_proo\
    f_message\x18\x04\x20\x01(\x0b2\x08.MessageR\x1bdeletedUsernameProofMess\
    ageB\0:\0\"\xcb\x03\n\x08HubEvent\x12#\n\x04type\x18\x01\x20\x01(\x0e2\r\
    .HubEventTypeR\x04typeB\0\x12\x10\n\x02id\x18\x02\x20\x01(\x04R\x02idB\0\
    \x12C\n\x12merge_message_body\x18\x03\x20\x01(\x0b2\x11.MergeMessageBody\
    H\0R\x10mergeMessageBodyB\0\x12C\n\x12prune_message_body\x18\x04\x20\x01\
    (\x0b2\x11.PruneMessageBodyH\0R\x10pruneMessageBodyB\0\x12F\n\x13revoke_\
    message_body\x18\x05\x20\x01(\x0b2\x12.RevokeMessageBodyH\0R\x11revokeMe\
    ssageBodyB\0\x12V\n\x19merge_username_proof_body\x18\x08\x20\x01(\x0b2\
    \x17.MergeUserNameProofBodyH\0R\x16mergeUsernameProofBodyB\0\x12T\n\x19m\
    erge_on_chain_event_body\x18\x0b\x20\x01(\x0b2\x16.MergeOnChainEventBody\
    H\0R\x15mergeOnChainEventBodyB\0B\x06\n\x04body:\0*\xe2\x01\n\x0cHubEven\
    tType\x12\x17\n\x13HUB_EVENT_TYPE_NONE\x10\0\x12\x20\n\x1cHUB_EVENT_TYPE\
    _MERGE_MESSAGE\x10\x01\x12\x20\n\x1cHUB_EVENT_TYPE_PRUNE_MESSAGE\x10\x02\
    \x12!\n\x1dHUB_EVENT_TYPE_REVOKE_MESSAGE\x10\x03\x12'\n#HUB_EVENT_TYPE_M\
    ERGE_USERNAME_PROOF\x10\x06\x12'\n#HUB_EVENT_TYPE_MERGE_ON_CHAIN_EVENT\
    \x10\t\x1a\0B\0b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
