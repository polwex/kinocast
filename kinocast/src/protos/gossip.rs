// This file is generated by rust-protobuf 2.28.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `gossip.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_28_0;

#[derive(PartialEq,Clone,Default)]
pub struct GossipAddressInfo {
    // message fields
    pub address: ::std::string::String,
    pub family: u32,
    pub port: u32,
    pub dns_name: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GossipAddressInfo {
    fn default() -> &'a GossipAddressInfo {
        <GossipAddressInfo as ::protobuf::Message>::default_instance()
    }
}

impl GossipAddressInfo {
    pub fn new() -> GossipAddressInfo {
        ::std::default::Default::default()
    }

    // string address = 1;


    pub fn get_address(&self) -> &str {
        &self.address
    }
    pub fn clear_address(&mut self) {
        self.address.clear();
    }

    // Param is passed by value, moved
    pub fn set_address(&mut self, v: ::std::string::String) {
        self.address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_address(&mut self) -> &mut ::std::string::String {
        &mut self.address
    }

    // Take field
    pub fn take_address(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.address, ::std::string::String::new())
    }

    // uint32 family = 2;


    pub fn get_family(&self) -> u32 {
        self.family
    }
    pub fn clear_family(&mut self) {
        self.family = 0;
    }

    // Param is passed by value, moved
    pub fn set_family(&mut self, v: u32) {
        self.family = v;
    }

    // uint32 port = 3;


    pub fn get_port(&self) -> u32 {
        self.port
    }
    pub fn clear_port(&mut self) {
        self.port = 0;
    }

    // Param is passed by value, moved
    pub fn set_port(&mut self, v: u32) {
        self.port = v;
    }

    // string dns_name = 4;


    pub fn get_dns_name(&self) -> &str {
        &self.dns_name
    }
    pub fn clear_dns_name(&mut self) {
        self.dns_name.clear();
    }

    // Param is passed by value, moved
    pub fn set_dns_name(&mut self, v: ::std::string::String) {
        self.dns_name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_dns_name(&mut self) -> &mut ::std::string::String {
        &mut self.dns_name
    }

    // Take field
    pub fn take_dns_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.dns_name, ::std::string::String::new())
    }
}

impl ::protobuf::Message for GossipAddressInfo {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.address)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.family = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.port = tmp;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.dns_name)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.address.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.address);
        }
        if self.family != 0 {
            my_size += ::protobuf::rt::value_size(2, self.family, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.port != 0 {
            my_size += ::protobuf::rt::value_size(3, self.port, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.dns_name.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.dns_name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.address.is_empty() {
            os.write_string(1, &self.address)?;
        }
        if self.family != 0 {
            os.write_uint32(2, self.family)?;
        }
        if self.port != 0 {
            os.write_uint32(3, self.port)?;
        }
        if !self.dns_name.is_empty() {
            os.write_string(4, &self.dns_name)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GossipAddressInfo {
        GossipAddressInfo::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "address",
                |m: &GossipAddressInfo| { &m.address },
                |m: &mut GossipAddressInfo| { &mut m.address },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "family",
                |m: &GossipAddressInfo| { &m.family },
                |m: &mut GossipAddressInfo| { &mut m.family },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "port",
                |m: &GossipAddressInfo| { &m.port },
                |m: &mut GossipAddressInfo| { &mut m.port },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "dns_name",
                |m: &GossipAddressInfo| { &m.dns_name },
                |m: &mut GossipAddressInfo| { &mut m.dns_name },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GossipAddressInfo>(
                "GossipAddressInfo",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GossipAddressInfo {
        static instance: ::protobuf::rt::LazyV2<GossipAddressInfo> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GossipAddressInfo::new)
    }
}

impl ::protobuf::Clear for GossipAddressInfo {
    fn clear(&mut self) {
        self.address.clear();
        self.family = 0;
        self.port = 0;
        self.dns_name.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GossipAddressInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GossipAddressInfo {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ContactInfoContentBody {
    // message fields
    pub gossip_address: ::protobuf::SingularPtrField<GossipAddressInfo>,
    pub rpc_address: ::protobuf::SingularPtrField<GossipAddressInfo>,
    pub excluded_hashes: ::protobuf::RepeatedField<::std::string::String>,
    pub count: u32,
    pub hub_version: ::std::string::String,
    pub network: super::message::FarcasterNetwork,
    pub app_version: ::std::string::String,
    pub timestamp: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ContactInfoContentBody {
    fn default() -> &'a ContactInfoContentBody {
        <ContactInfoContentBody as ::protobuf::Message>::default_instance()
    }
}

impl ContactInfoContentBody {
    pub fn new() -> ContactInfoContentBody {
        ::std::default::Default::default()
    }

    // .GossipAddressInfo gossip_address = 1;


    pub fn get_gossip_address(&self) -> &GossipAddressInfo {
        self.gossip_address.as_ref().unwrap_or_else(|| <GossipAddressInfo as ::protobuf::Message>::default_instance())
    }
    pub fn clear_gossip_address(&mut self) {
        self.gossip_address.clear();
    }

    pub fn has_gossip_address(&self) -> bool {
        self.gossip_address.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gossip_address(&mut self, v: GossipAddressInfo) {
        self.gossip_address = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_gossip_address(&mut self) -> &mut GossipAddressInfo {
        if self.gossip_address.is_none() {
            self.gossip_address.set_default();
        }
        self.gossip_address.as_mut().unwrap()
    }

    // Take field
    pub fn take_gossip_address(&mut self) -> GossipAddressInfo {
        self.gossip_address.take().unwrap_or_else(|| GossipAddressInfo::new())
    }

    // .GossipAddressInfo rpc_address = 2;


    pub fn get_rpc_address(&self) -> &GossipAddressInfo {
        self.rpc_address.as_ref().unwrap_or_else(|| <GossipAddressInfo as ::protobuf::Message>::default_instance())
    }
    pub fn clear_rpc_address(&mut self) {
        self.rpc_address.clear();
    }

    pub fn has_rpc_address(&self) -> bool {
        self.rpc_address.is_some()
    }

    // Param is passed by value, moved
    pub fn set_rpc_address(&mut self, v: GossipAddressInfo) {
        self.rpc_address = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_rpc_address(&mut self) -> &mut GossipAddressInfo {
        if self.rpc_address.is_none() {
            self.rpc_address.set_default();
        }
        self.rpc_address.as_mut().unwrap()
    }

    // Take field
    pub fn take_rpc_address(&mut self) -> GossipAddressInfo {
        self.rpc_address.take().unwrap_or_else(|| GossipAddressInfo::new())
    }

    // repeated string excluded_hashes = 3;


    pub fn get_excluded_hashes(&self) -> &[::std::string::String] {
        &self.excluded_hashes
    }
    pub fn clear_excluded_hashes(&mut self) {
        self.excluded_hashes.clear();
    }

    // Param is passed by value, moved
    pub fn set_excluded_hashes(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.excluded_hashes = v;
    }

    // Mutable pointer to the field.
    pub fn mut_excluded_hashes(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.excluded_hashes
    }

    // Take field
    pub fn take_excluded_hashes(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.excluded_hashes, ::protobuf::RepeatedField::new())
    }

    // uint32 count = 4;


    pub fn get_count(&self) -> u32 {
        self.count
    }
    pub fn clear_count(&mut self) {
        self.count = 0;
    }

    // Param is passed by value, moved
    pub fn set_count(&mut self, v: u32) {
        self.count = v;
    }

    // string hub_version = 5;


    pub fn get_hub_version(&self) -> &str {
        &self.hub_version
    }
    pub fn clear_hub_version(&mut self) {
        self.hub_version.clear();
    }

    // Param is passed by value, moved
    pub fn set_hub_version(&mut self, v: ::std::string::String) {
        self.hub_version = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_hub_version(&mut self) -> &mut ::std::string::String {
        &mut self.hub_version
    }

    // Take field
    pub fn take_hub_version(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.hub_version, ::std::string::String::new())
    }

    // .FarcasterNetwork network = 6;


    pub fn get_network(&self) -> super::message::FarcasterNetwork {
        self.network
    }
    pub fn clear_network(&mut self) {
        self.network = super::message::FarcasterNetwork::FARCASTER_NETWORK_NONE;
    }

    // Param is passed by value, moved
    pub fn set_network(&mut self, v: super::message::FarcasterNetwork) {
        self.network = v;
    }

    // string app_version = 7;


    pub fn get_app_version(&self) -> &str {
        &self.app_version
    }
    pub fn clear_app_version(&mut self) {
        self.app_version.clear();
    }

    // Param is passed by value, moved
    pub fn set_app_version(&mut self, v: ::std::string::String) {
        self.app_version = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_app_version(&mut self) -> &mut ::std::string::String {
        &mut self.app_version
    }

    // Take field
    pub fn take_app_version(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.app_version, ::std::string::String::new())
    }

    // uint64 timestamp = 8;


    pub fn get_timestamp(&self) -> u64 {
        self.timestamp
    }
    pub fn clear_timestamp(&mut self) {
        self.timestamp = 0;
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: u64) {
        self.timestamp = v;
    }
}

impl ::protobuf::Message for ContactInfoContentBody {
    fn is_initialized(&self) -> bool {
        for v in &self.gossip_address {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.rpc_address {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.gossip_address)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.rpc_address)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.excluded_hashes)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.count = tmp;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.hub_version)?;
                },
                6 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.network, 6, &mut self.unknown_fields)?
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.app_version)?;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.timestamp = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.gossip_address.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.rpc_address.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.excluded_hashes {
            my_size += ::protobuf::rt::string_size(3, &value);
        };
        if self.count != 0 {
            my_size += ::protobuf::rt::value_size(4, self.count, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.hub_version.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.hub_version);
        }
        if self.network != super::message::FarcasterNetwork::FARCASTER_NETWORK_NONE {
            my_size += ::protobuf::rt::enum_size(6, self.network);
        }
        if !self.app_version.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.app_version);
        }
        if self.timestamp != 0 {
            my_size += ::protobuf::rt::value_size(8, self.timestamp, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.gossip_address.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.rpc_address.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.excluded_hashes {
            os.write_string(3, &v)?;
        };
        if self.count != 0 {
            os.write_uint32(4, self.count)?;
        }
        if !self.hub_version.is_empty() {
            os.write_string(5, &self.hub_version)?;
        }
        if self.network != super::message::FarcasterNetwork::FARCASTER_NETWORK_NONE {
            os.write_enum(6, ::protobuf::ProtobufEnum::value(&self.network))?;
        }
        if !self.app_version.is_empty() {
            os.write_string(7, &self.app_version)?;
        }
        if self.timestamp != 0 {
            os.write_uint64(8, self.timestamp)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ContactInfoContentBody {
        ContactInfoContentBody::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<GossipAddressInfo>>(
                "gossip_address",
                |m: &ContactInfoContentBody| { &m.gossip_address },
                |m: &mut ContactInfoContentBody| { &mut m.gossip_address },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<GossipAddressInfo>>(
                "rpc_address",
                |m: &ContactInfoContentBody| { &m.rpc_address },
                |m: &mut ContactInfoContentBody| { &mut m.rpc_address },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "excluded_hashes",
                |m: &ContactInfoContentBody| { &m.excluded_hashes },
                |m: &mut ContactInfoContentBody| { &mut m.excluded_hashes },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "count",
                |m: &ContactInfoContentBody| { &m.count },
                |m: &mut ContactInfoContentBody| { &mut m.count },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "hub_version",
                |m: &ContactInfoContentBody| { &m.hub_version },
                |m: &mut ContactInfoContentBody| { &mut m.hub_version },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<super::message::FarcasterNetwork>>(
                "network",
                |m: &ContactInfoContentBody| { &m.network },
                |m: &mut ContactInfoContentBody| { &mut m.network },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "app_version",
                |m: &ContactInfoContentBody| { &m.app_version },
                |m: &mut ContactInfoContentBody| { &mut m.app_version },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "timestamp",
                |m: &ContactInfoContentBody| { &m.timestamp },
                |m: &mut ContactInfoContentBody| { &mut m.timestamp },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ContactInfoContentBody>(
                "ContactInfoContentBody",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ContactInfoContentBody {
        static instance: ::protobuf::rt::LazyV2<ContactInfoContentBody> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ContactInfoContentBody::new)
    }
}

impl ::protobuf::Clear for ContactInfoContentBody {
    fn clear(&mut self) {
        self.gossip_address.clear();
        self.rpc_address.clear();
        self.excluded_hashes.clear();
        self.count = 0;
        self.hub_version.clear();
        self.network = super::message::FarcasterNetwork::FARCASTER_NETWORK_NONE;
        self.app_version.clear();
        self.timestamp = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ContactInfoContentBody {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ContactInfoContentBody {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ContactInfoContent {
    // message fields
    pub gossip_address: ::protobuf::SingularPtrField<GossipAddressInfo>,
    pub rpc_address: ::protobuf::SingularPtrField<GossipAddressInfo>,
    pub excluded_hashes: ::protobuf::RepeatedField<::std::string::String>,
    pub count: u32,
    pub hub_version: ::std::string::String,
    pub network: super::message::FarcasterNetwork,
    pub app_version: ::std::string::String,
    pub timestamp: u64,
    pub body: ::protobuf::SingularPtrField<ContactInfoContentBody>,
    pub signature: ::std::vec::Vec<u8>,
    pub signer: ::std::vec::Vec<u8>,
    pub data_bytes: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ContactInfoContent {
    fn default() -> &'a ContactInfoContent {
        <ContactInfoContent as ::protobuf::Message>::default_instance()
    }
}

impl ContactInfoContent {
    pub fn new() -> ContactInfoContent {
        ::std::default::Default::default()
    }

    // .GossipAddressInfo gossip_address = 1;


    pub fn get_gossip_address(&self) -> &GossipAddressInfo {
        self.gossip_address.as_ref().unwrap_or_else(|| <GossipAddressInfo as ::protobuf::Message>::default_instance())
    }
    pub fn clear_gossip_address(&mut self) {
        self.gossip_address.clear();
    }

    pub fn has_gossip_address(&self) -> bool {
        self.gossip_address.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gossip_address(&mut self, v: GossipAddressInfo) {
        self.gossip_address = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_gossip_address(&mut self) -> &mut GossipAddressInfo {
        if self.gossip_address.is_none() {
            self.gossip_address.set_default();
        }
        self.gossip_address.as_mut().unwrap()
    }

    // Take field
    pub fn take_gossip_address(&mut self) -> GossipAddressInfo {
        self.gossip_address.take().unwrap_or_else(|| GossipAddressInfo::new())
    }

    // .GossipAddressInfo rpc_address = 2;


    pub fn get_rpc_address(&self) -> &GossipAddressInfo {
        self.rpc_address.as_ref().unwrap_or_else(|| <GossipAddressInfo as ::protobuf::Message>::default_instance())
    }
    pub fn clear_rpc_address(&mut self) {
        self.rpc_address.clear();
    }

    pub fn has_rpc_address(&self) -> bool {
        self.rpc_address.is_some()
    }

    // Param is passed by value, moved
    pub fn set_rpc_address(&mut self, v: GossipAddressInfo) {
        self.rpc_address = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_rpc_address(&mut self) -> &mut GossipAddressInfo {
        if self.rpc_address.is_none() {
            self.rpc_address.set_default();
        }
        self.rpc_address.as_mut().unwrap()
    }

    // Take field
    pub fn take_rpc_address(&mut self) -> GossipAddressInfo {
        self.rpc_address.take().unwrap_or_else(|| GossipAddressInfo::new())
    }

    // repeated string excluded_hashes = 3;


    pub fn get_excluded_hashes(&self) -> &[::std::string::String] {
        &self.excluded_hashes
    }
    pub fn clear_excluded_hashes(&mut self) {
        self.excluded_hashes.clear();
    }

    // Param is passed by value, moved
    pub fn set_excluded_hashes(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.excluded_hashes = v;
    }

    // Mutable pointer to the field.
    pub fn mut_excluded_hashes(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.excluded_hashes
    }

    // Take field
    pub fn take_excluded_hashes(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.excluded_hashes, ::protobuf::RepeatedField::new())
    }

    // uint32 count = 4;


    pub fn get_count(&self) -> u32 {
        self.count
    }
    pub fn clear_count(&mut self) {
        self.count = 0;
    }

    // Param is passed by value, moved
    pub fn set_count(&mut self, v: u32) {
        self.count = v;
    }

    // string hub_version = 5;


    pub fn get_hub_version(&self) -> &str {
        &self.hub_version
    }
    pub fn clear_hub_version(&mut self) {
        self.hub_version.clear();
    }

    // Param is passed by value, moved
    pub fn set_hub_version(&mut self, v: ::std::string::String) {
        self.hub_version = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_hub_version(&mut self) -> &mut ::std::string::String {
        &mut self.hub_version
    }

    // Take field
    pub fn take_hub_version(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.hub_version, ::std::string::String::new())
    }

    // .FarcasterNetwork network = 6;


    pub fn get_network(&self) -> super::message::FarcasterNetwork {
        self.network
    }
    pub fn clear_network(&mut self) {
        self.network = super::message::FarcasterNetwork::FARCASTER_NETWORK_NONE;
    }

    // Param is passed by value, moved
    pub fn set_network(&mut self, v: super::message::FarcasterNetwork) {
        self.network = v;
    }

    // string app_version = 7;


    pub fn get_app_version(&self) -> &str {
        &self.app_version
    }
    pub fn clear_app_version(&mut self) {
        self.app_version.clear();
    }

    // Param is passed by value, moved
    pub fn set_app_version(&mut self, v: ::std::string::String) {
        self.app_version = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_app_version(&mut self) -> &mut ::std::string::String {
        &mut self.app_version
    }

    // Take field
    pub fn take_app_version(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.app_version, ::std::string::String::new())
    }

    // uint64 timestamp = 8;


    pub fn get_timestamp(&self) -> u64 {
        self.timestamp
    }
    pub fn clear_timestamp(&mut self) {
        self.timestamp = 0;
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: u64) {
        self.timestamp = v;
    }

    // .ContactInfoContentBody body = 9;


    pub fn get_body(&self) -> &ContactInfoContentBody {
        self.body.as_ref().unwrap_or_else(|| <ContactInfoContentBody as ::protobuf::Message>::default_instance())
    }
    pub fn clear_body(&mut self) {
        self.body.clear();
    }

    pub fn has_body(&self) -> bool {
        self.body.is_some()
    }

    // Param is passed by value, moved
    pub fn set_body(&mut self, v: ContactInfoContentBody) {
        self.body = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_body(&mut self) -> &mut ContactInfoContentBody {
        if self.body.is_none() {
            self.body.set_default();
        }
        self.body.as_mut().unwrap()
    }

    // Take field
    pub fn take_body(&mut self) -> ContactInfoContentBody {
        self.body.take().unwrap_or_else(|| ContactInfoContentBody::new())
    }

    // bytes signature = 10;


    pub fn get_signature(&self) -> &[u8] {
        &self.signature
    }
    pub fn clear_signature(&mut self) {
        self.signature.clear();
    }

    // Param is passed by value, moved
    pub fn set_signature(&mut self, v: ::std::vec::Vec<u8>) {
        self.signature = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signature(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.signature
    }

    // Take field
    pub fn take_signature(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.signature, ::std::vec::Vec::new())
    }

    // bytes signer = 11;


    pub fn get_signer(&self) -> &[u8] {
        &self.signer
    }
    pub fn clear_signer(&mut self) {
        self.signer.clear();
    }

    // Param is passed by value, moved
    pub fn set_signer(&mut self, v: ::std::vec::Vec<u8>) {
        self.signer = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_signer(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.signer
    }

    // Take field
    pub fn take_signer(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.signer, ::std::vec::Vec::new())
    }

    // bytes data_bytes = 12;


    pub fn get_data_bytes(&self) -> &[u8] {
        &self.data_bytes
    }
    pub fn clear_data_bytes(&mut self) {
        self.data_bytes.clear();
    }

    // Param is passed by value, moved
    pub fn set_data_bytes(&mut self, v: ::std::vec::Vec<u8>) {
        self.data_bytes = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_data_bytes(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.data_bytes
    }

    // Take field
    pub fn take_data_bytes(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.data_bytes, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for ContactInfoContent {
    fn is_initialized(&self) -> bool {
        for v in &self.gossip_address {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.rpc_address {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.body {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.gossip_address)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.rpc_address)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.excluded_hashes)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.count = tmp;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.hub_version)?;
                },
                6 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.network, 6, &mut self.unknown_fields)?
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.app_version)?;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.timestamp = tmp;
                },
                9 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.body)?;
                },
                10 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.signature)?;
                },
                11 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.signer)?;
                },
                12 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.data_bytes)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.gossip_address.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.rpc_address.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.excluded_hashes {
            my_size += ::protobuf::rt::string_size(3, &value);
        };
        if self.count != 0 {
            my_size += ::protobuf::rt::value_size(4, self.count, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.hub_version.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.hub_version);
        }
        if self.network != super::message::FarcasterNetwork::FARCASTER_NETWORK_NONE {
            my_size += ::protobuf::rt::enum_size(6, self.network);
        }
        if !self.app_version.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.app_version);
        }
        if self.timestamp != 0 {
            my_size += ::protobuf::rt::value_size(8, self.timestamp, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.body.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.signature.is_empty() {
            my_size += ::protobuf::rt::bytes_size(10, &self.signature);
        }
        if !self.signer.is_empty() {
            my_size += ::protobuf::rt::bytes_size(11, &self.signer);
        }
        if !self.data_bytes.is_empty() {
            my_size += ::protobuf::rt::bytes_size(12, &self.data_bytes);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.gossip_address.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.rpc_address.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.excluded_hashes {
            os.write_string(3, &v)?;
        };
        if self.count != 0 {
            os.write_uint32(4, self.count)?;
        }
        if !self.hub_version.is_empty() {
            os.write_string(5, &self.hub_version)?;
        }
        if self.network != super::message::FarcasterNetwork::FARCASTER_NETWORK_NONE {
            os.write_enum(6, ::protobuf::ProtobufEnum::value(&self.network))?;
        }
        if !self.app_version.is_empty() {
            os.write_string(7, &self.app_version)?;
        }
        if self.timestamp != 0 {
            os.write_uint64(8, self.timestamp)?;
        }
        if let Some(ref v) = self.body.as_ref() {
            os.write_tag(9, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.signature.is_empty() {
            os.write_bytes(10, &self.signature)?;
        }
        if !self.signer.is_empty() {
            os.write_bytes(11, &self.signer)?;
        }
        if !self.data_bytes.is_empty() {
            os.write_bytes(12, &self.data_bytes)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ContactInfoContent {
        ContactInfoContent::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<GossipAddressInfo>>(
                "gossip_address",
                |m: &ContactInfoContent| { &m.gossip_address },
                |m: &mut ContactInfoContent| { &mut m.gossip_address },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<GossipAddressInfo>>(
                "rpc_address",
                |m: &ContactInfoContent| { &m.rpc_address },
                |m: &mut ContactInfoContent| { &mut m.rpc_address },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "excluded_hashes",
                |m: &ContactInfoContent| { &m.excluded_hashes },
                |m: &mut ContactInfoContent| { &mut m.excluded_hashes },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "count",
                |m: &ContactInfoContent| { &m.count },
                |m: &mut ContactInfoContent| { &mut m.count },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "hub_version",
                |m: &ContactInfoContent| { &m.hub_version },
                |m: &mut ContactInfoContent| { &mut m.hub_version },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<super::message::FarcasterNetwork>>(
                "network",
                |m: &ContactInfoContent| { &m.network },
                |m: &mut ContactInfoContent| { &mut m.network },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "app_version",
                |m: &ContactInfoContent| { &m.app_version },
                |m: &mut ContactInfoContent| { &mut m.app_version },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "timestamp",
                |m: &ContactInfoContent| { &m.timestamp },
                |m: &mut ContactInfoContent| { &mut m.timestamp },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ContactInfoContentBody>>(
                "body",
                |m: &ContactInfoContent| { &m.body },
                |m: &mut ContactInfoContent| { &mut m.body },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "signature",
                |m: &ContactInfoContent| { &m.signature },
                |m: &mut ContactInfoContent| { &mut m.signature },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "signer",
                |m: &ContactInfoContent| { &m.signer },
                |m: &mut ContactInfoContent| { &mut m.signer },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "data_bytes",
                |m: &ContactInfoContent| { &m.data_bytes },
                |m: &mut ContactInfoContent| { &mut m.data_bytes },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ContactInfoContent>(
                "ContactInfoContent",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ContactInfoContent {
        static instance: ::protobuf::rt::LazyV2<ContactInfoContent> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ContactInfoContent::new)
    }
}

impl ::protobuf::Clear for ContactInfoContent {
    fn clear(&mut self) {
        self.gossip_address.clear();
        self.rpc_address.clear();
        self.excluded_hashes.clear();
        self.count = 0;
        self.hub_version.clear();
        self.network = super::message::FarcasterNetwork::FARCASTER_NETWORK_NONE;
        self.app_version.clear();
        self.timestamp = 0;
        self.body.clear();
        self.signature.clear();
        self.signer.clear();
        self.data_bytes.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ContactInfoContent {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ContactInfoContent {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PingMessageBody {
    // message fields
    pub ping_origin_peer_id: ::std::vec::Vec<u8>,
    pub ping_timestamp: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PingMessageBody {
    fn default() -> &'a PingMessageBody {
        <PingMessageBody as ::protobuf::Message>::default_instance()
    }
}

impl PingMessageBody {
    pub fn new() -> PingMessageBody {
        ::std::default::Default::default()
    }

    // bytes ping_origin_peer_id = 1;


    pub fn get_ping_origin_peer_id(&self) -> &[u8] {
        &self.ping_origin_peer_id
    }
    pub fn clear_ping_origin_peer_id(&mut self) {
        self.ping_origin_peer_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_ping_origin_peer_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.ping_origin_peer_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ping_origin_peer_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.ping_origin_peer_id
    }

    // Take field
    pub fn take_ping_origin_peer_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.ping_origin_peer_id, ::std::vec::Vec::new())
    }

    // uint64 ping_timestamp = 2;


    pub fn get_ping_timestamp(&self) -> u64 {
        self.ping_timestamp
    }
    pub fn clear_ping_timestamp(&mut self) {
        self.ping_timestamp = 0;
    }

    // Param is passed by value, moved
    pub fn set_ping_timestamp(&mut self, v: u64) {
        self.ping_timestamp = v;
    }
}

impl ::protobuf::Message for PingMessageBody {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.ping_origin_peer_id)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.ping_timestamp = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.ping_origin_peer_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.ping_origin_peer_id);
        }
        if self.ping_timestamp != 0 {
            my_size += ::protobuf::rt::value_size(2, self.ping_timestamp, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.ping_origin_peer_id.is_empty() {
            os.write_bytes(1, &self.ping_origin_peer_id)?;
        }
        if self.ping_timestamp != 0 {
            os.write_uint64(2, self.ping_timestamp)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PingMessageBody {
        PingMessageBody::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "ping_origin_peer_id",
                |m: &PingMessageBody| { &m.ping_origin_peer_id },
                |m: &mut PingMessageBody| { &mut m.ping_origin_peer_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "ping_timestamp",
                |m: &PingMessageBody| { &m.ping_timestamp },
                |m: &mut PingMessageBody| { &mut m.ping_timestamp },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<PingMessageBody>(
                "PingMessageBody",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static PingMessageBody {
        static instance: ::protobuf::rt::LazyV2<PingMessageBody> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PingMessageBody::new)
    }
}

impl ::protobuf::Clear for PingMessageBody {
    fn clear(&mut self) {
        self.ping_origin_peer_id.clear();
        self.ping_timestamp = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PingMessageBody {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PingMessageBody {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AckMessageBody {
    // message fields
    pub ping_origin_peer_id: ::std::vec::Vec<u8>,
    pub ack_origin_peer_id: ::std::vec::Vec<u8>,
    pub ping_timestamp: u64,
    pub ack_timestamp: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AckMessageBody {
    fn default() -> &'a AckMessageBody {
        <AckMessageBody as ::protobuf::Message>::default_instance()
    }
}

impl AckMessageBody {
    pub fn new() -> AckMessageBody {
        ::std::default::Default::default()
    }

    // bytes ping_origin_peer_id = 1;


    pub fn get_ping_origin_peer_id(&self) -> &[u8] {
        &self.ping_origin_peer_id
    }
    pub fn clear_ping_origin_peer_id(&mut self) {
        self.ping_origin_peer_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_ping_origin_peer_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.ping_origin_peer_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ping_origin_peer_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.ping_origin_peer_id
    }

    // Take field
    pub fn take_ping_origin_peer_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.ping_origin_peer_id, ::std::vec::Vec::new())
    }

    // bytes ack_origin_peer_id = 2;


    pub fn get_ack_origin_peer_id(&self) -> &[u8] {
        &self.ack_origin_peer_id
    }
    pub fn clear_ack_origin_peer_id(&mut self) {
        self.ack_origin_peer_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_ack_origin_peer_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.ack_origin_peer_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ack_origin_peer_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.ack_origin_peer_id
    }

    // Take field
    pub fn take_ack_origin_peer_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.ack_origin_peer_id, ::std::vec::Vec::new())
    }

    // uint64 ping_timestamp = 3;


    pub fn get_ping_timestamp(&self) -> u64 {
        self.ping_timestamp
    }
    pub fn clear_ping_timestamp(&mut self) {
        self.ping_timestamp = 0;
    }

    // Param is passed by value, moved
    pub fn set_ping_timestamp(&mut self, v: u64) {
        self.ping_timestamp = v;
    }

    // uint64 ack_timestamp = 4;


    pub fn get_ack_timestamp(&self) -> u64 {
        self.ack_timestamp
    }
    pub fn clear_ack_timestamp(&mut self) {
        self.ack_timestamp = 0;
    }

    // Param is passed by value, moved
    pub fn set_ack_timestamp(&mut self, v: u64) {
        self.ack_timestamp = v;
    }
}

impl ::protobuf::Message for AckMessageBody {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.ping_origin_peer_id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.ack_origin_peer_id)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.ping_timestamp = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.ack_timestamp = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.ping_origin_peer_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.ping_origin_peer_id);
        }
        if !self.ack_origin_peer_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.ack_origin_peer_id);
        }
        if self.ping_timestamp != 0 {
            my_size += ::protobuf::rt::value_size(3, self.ping_timestamp, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.ack_timestamp != 0 {
            my_size += ::protobuf::rt::value_size(4, self.ack_timestamp, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.ping_origin_peer_id.is_empty() {
            os.write_bytes(1, &self.ping_origin_peer_id)?;
        }
        if !self.ack_origin_peer_id.is_empty() {
            os.write_bytes(2, &self.ack_origin_peer_id)?;
        }
        if self.ping_timestamp != 0 {
            os.write_uint64(3, self.ping_timestamp)?;
        }
        if self.ack_timestamp != 0 {
            os.write_uint64(4, self.ack_timestamp)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AckMessageBody {
        AckMessageBody::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "ping_origin_peer_id",
                |m: &AckMessageBody| { &m.ping_origin_peer_id },
                |m: &mut AckMessageBody| { &mut m.ping_origin_peer_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "ack_origin_peer_id",
                |m: &AckMessageBody| { &m.ack_origin_peer_id },
                |m: &mut AckMessageBody| { &mut m.ack_origin_peer_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "ping_timestamp",
                |m: &AckMessageBody| { &m.ping_timestamp },
                |m: &mut AckMessageBody| { &mut m.ping_timestamp },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "ack_timestamp",
                |m: &AckMessageBody| { &m.ack_timestamp },
                |m: &mut AckMessageBody| { &mut m.ack_timestamp },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AckMessageBody>(
                "AckMessageBody",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AckMessageBody {
        static instance: ::protobuf::rt::LazyV2<AckMessageBody> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AckMessageBody::new)
    }
}

impl ::protobuf::Clear for AckMessageBody {
    fn clear(&mut self) {
        self.ping_origin_peer_id.clear();
        self.ack_origin_peer_id.clear();
        self.ping_timestamp = 0;
        self.ack_timestamp = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AckMessageBody {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AckMessageBody {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct NetworkLatencyMessage {
    // message oneof groups
    pub body: ::std::option::Option<NetworkLatencyMessage_oneof_body>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a NetworkLatencyMessage {
    fn default() -> &'a NetworkLatencyMessage {
        <NetworkLatencyMessage as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum NetworkLatencyMessage_oneof_body {
    ping_message(PingMessageBody),
    ack_message(AckMessageBody),
}

impl NetworkLatencyMessage {
    pub fn new() -> NetworkLatencyMessage {
        ::std::default::Default::default()
    }

    // .PingMessageBody ping_message = 2;


    pub fn get_ping_message(&self) -> &PingMessageBody {
        match self.body {
            ::std::option::Option::Some(NetworkLatencyMessage_oneof_body::ping_message(ref v)) => v,
            _ => <PingMessageBody as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_ping_message(&mut self) {
        self.body = ::std::option::Option::None;
    }

    pub fn has_ping_message(&self) -> bool {
        match self.body {
            ::std::option::Option::Some(NetworkLatencyMessage_oneof_body::ping_message(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_ping_message(&mut self, v: PingMessageBody) {
        self.body = ::std::option::Option::Some(NetworkLatencyMessage_oneof_body::ping_message(v))
    }

    // Mutable pointer to the field.
    pub fn mut_ping_message(&mut self) -> &mut PingMessageBody {
        if let ::std::option::Option::Some(NetworkLatencyMessage_oneof_body::ping_message(_)) = self.body {
        } else {
            self.body = ::std::option::Option::Some(NetworkLatencyMessage_oneof_body::ping_message(PingMessageBody::new()));
        }
        match self.body {
            ::std::option::Option::Some(NetworkLatencyMessage_oneof_body::ping_message(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_ping_message(&mut self) -> PingMessageBody {
        if self.has_ping_message() {
            match self.body.take() {
                ::std::option::Option::Some(NetworkLatencyMessage_oneof_body::ping_message(v)) => v,
                _ => panic!(),
            }
        } else {
            PingMessageBody::new()
        }
    }

    // .AckMessageBody ack_message = 3;


    pub fn get_ack_message(&self) -> &AckMessageBody {
        match self.body {
            ::std::option::Option::Some(NetworkLatencyMessage_oneof_body::ack_message(ref v)) => v,
            _ => <AckMessageBody as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_ack_message(&mut self) {
        self.body = ::std::option::Option::None;
    }

    pub fn has_ack_message(&self) -> bool {
        match self.body {
            ::std::option::Option::Some(NetworkLatencyMessage_oneof_body::ack_message(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_ack_message(&mut self, v: AckMessageBody) {
        self.body = ::std::option::Option::Some(NetworkLatencyMessage_oneof_body::ack_message(v))
    }

    // Mutable pointer to the field.
    pub fn mut_ack_message(&mut self) -> &mut AckMessageBody {
        if let ::std::option::Option::Some(NetworkLatencyMessage_oneof_body::ack_message(_)) = self.body {
        } else {
            self.body = ::std::option::Option::Some(NetworkLatencyMessage_oneof_body::ack_message(AckMessageBody::new()));
        }
        match self.body {
            ::std::option::Option::Some(NetworkLatencyMessage_oneof_body::ack_message(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_ack_message(&mut self) -> AckMessageBody {
        if self.has_ack_message() {
            match self.body.take() {
                ::std::option::Option::Some(NetworkLatencyMessage_oneof_body::ack_message(v)) => v,
                _ => panic!(),
            }
        } else {
            AckMessageBody::new()
        }
    }
}

impl ::protobuf::Message for NetworkLatencyMessage {
    fn is_initialized(&self) -> bool {
        if let Some(NetworkLatencyMessage_oneof_body::ping_message(ref v)) = self.body {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(NetworkLatencyMessage_oneof_body::ack_message(ref v)) = self.body {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.body = ::std::option::Option::Some(NetworkLatencyMessage_oneof_body::ping_message(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.body = ::std::option::Option::Some(NetworkLatencyMessage_oneof_body::ack_message(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.body {
            match v {
                &NetworkLatencyMessage_oneof_body::ping_message(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &NetworkLatencyMessage_oneof_body::ack_message(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.body {
            match v {
                &NetworkLatencyMessage_oneof_body::ping_message(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &NetworkLatencyMessage_oneof_body::ack_message(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> NetworkLatencyMessage {
        NetworkLatencyMessage::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, PingMessageBody>(
                "ping_message",
                NetworkLatencyMessage::has_ping_message,
                NetworkLatencyMessage::get_ping_message,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, AckMessageBody>(
                "ack_message",
                NetworkLatencyMessage::has_ack_message,
                NetworkLatencyMessage::get_ack_message,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<NetworkLatencyMessage>(
                "NetworkLatencyMessage",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static NetworkLatencyMessage {
        static instance: ::protobuf::rt::LazyV2<NetworkLatencyMessage> = ::protobuf::rt::LazyV2::INIT;
        instance.get(NetworkLatencyMessage::new)
    }
}

impl ::protobuf::Clear for NetworkLatencyMessage {
    fn clear(&mut self) {
        self.body = ::std::option::Option::None;
        self.body = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for NetworkLatencyMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for NetworkLatencyMessage {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MessageBundle {
    // message fields
    pub hash: ::std::vec::Vec<u8>,
    pub messages: ::protobuf::RepeatedField<super::message::Message>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MessageBundle {
    fn default() -> &'a MessageBundle {
        <MessageBundle as ::protobuf::Message>::default_instance()
    }
}

impl MessageBundle {
    pub fn new() -> MessageBundle {
        ::std::default::Default::default()
    }

    // bytes hash = 1;


    pub fn get_hash(&self) -> &[u8] {
        &self.hash
    }
    pub fn clear_hash(&mut self) {
        self.hash.clear();
    }

    // Param is passed by value, moved
    pub fn set_hash(&mut self, v: ::std::vec::Vec<u8>) {
        self.hash = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_hash(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.hash
    }

    // Take field
    pub fn take_hash(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.hash, ::std::vec::Vec::new())
    }

    // repeated .Message messages = 2;


    pub fn get_messages(&self) -> &[super::message::Message] {
        &self.messages
    }
    pub fn clear_messages(&mut self) {
        self.messages.clear();
    }

    // Param is passed by value, moved
    pub fn set_messages(&mut self, v: ::protobuf::RepeatedField<super::message::Message>) {
        self.messages = v;
    }

    // Mutable pointer to the field.
    pub fn mut_messages(&mut self) -> &mut ::protobuf::RepeatedField<super::message::Message> {
        &mut self.messages
    }

    // Take field
    pub fn take_messages(&mut self) -> ::protobuf::RepeatedField<super::message::Message> {
        ::std::mem::replace(&mut self.messages, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for MessageBundle {
    fn is_initialized(&self) -> bool {
        for v in &self.messages {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.hash)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.messages)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.hash.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.hash);
        }
        for value in &self.messages {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.hash.is_empty() {
            os.write_bytes(1, &self.hash)?;
        }
        for v in &self.messages {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MessageBundle {
        MessageBundle::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "hash",
                |m: &MessageBundle| { &m.hash },
                |m: &mut MessageBundle| { &mut m.hash },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::message::Message>>(
                "messages",
                |m: &MessageBundle| { &m.messages },
                |m: &mut MessageBundle| { &mut m.messages },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MessageBundle>(
                "MessageBundle",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MessageBundle {
        static instance: ::protobuf::rt::LazyV2<MessageBundle> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MessageBundle::new)
    }
}

impl ::protobuf::Clear for MessageBundle {
    fn clear(&mut self) {
        self.hash.clear();
        self.messages.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MessageBundle {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MessageBundle {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GossipMessage {
    // message fields
    pub topics: ::protobuf::RepeatedField<::std::string::String>,
    pub peer_id: ::std::vec::Vec<u8>,
    pub version: GossipVersion,
    pub timestamp: u32,
    // message oneof groups
    pub content: ::std::option::Option<GossipMessage_oneof_content>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GossipMessage {
    fn default() -> &'a GossipMessage {
        <GossipMessage as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum GossipMessage_oneof_content {
    message(super::message::Message),
    contact_info_content(ContactInfoContent),
    network_latency_message(NetworkLatencyMessage),
    message_bundle(MessageBundle),
}

impl GossipMessage {
    pub fn new() -> GossipMessage {
        ::std::default::Default::default()
    }

    // .Message message = 1;


    pub fn get_message(&self) -> &super::message::Message {
        match self.content {
            ::std::option::Option::Some(GossipMessage_oneof_content::message(ref v)) => v,
            _ => <super::message::Message as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_message(&mut self) {
        self.content = ::std::option::Option::None;
    }

    pub fn has_message(&self) -> bool {
        match self.content {
            ::std::option::Option::Some(GossipMessage_oneof_content::message(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_message(&mut self, v: super::message::Message) {
        self.content = ::std::option::Option::Some(GossipMessage_oneof_content::message(v))
    }

    // Mutable pointer to the field.
    pub fn mut_message(&mut self) -> &mut super::message::Message {
        if let ::std::option::Option::Some(GossipMessage_oneof_content::message(_)) = self.content {
        } else {
            self.content = ::std::option::Option::Some(GossipMessage_oneof_content::message(super::message::Message::new()));
        }
        match self.content {
            ::std::option::Option::Some(GossipMessage_oneof_content::message(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_message(&mut self) -> super::message::Message {
        if self.has_message() {
            match self.content.take() {
                ::std::option::Option::Some(GossipMessage_oneof_content::message(v)) => v,
                _ => panic!(),
            }
        } else {
            super::message::Message::new()
        }
    }

    // .ContactInfoContent contact_info_content = 3;


    pub fn get_contact_info_content(&self) -> &ContactInfoContent {
        match self.content {
            ::std::option::Option::Some(GossipMessage_oneof_content::contact_info_content(ref v)) => v,
            _ => <ContactInfoContent as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_contact_info_content(&mut self) {
        self.content = ::std::option::Option::None;
    }

    pub fn has_contact_info_content(&self) -> bool {
        match self.content {
            ::std::option::Option::Some(GossipMessage_oneof_content::contact_info_content(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_contact_info_content(&mut self, v: ContactInfoContent) {
        self.content = ::std::option::Option::Some(GossipMessage_oneof_content::contact_info_content(v))
    }

    // Mutable pointer to the field.
    pub fn mut_contact_info_content(&mut self) -> &mut ContactInfoContent {
        if let ::std::option::Option::Some(GossipMessage_oneof_content::contact_info_content(_)) = self.content {
        } else {
            self.content = ::std::option::Option::Some(GossipMessage_oneof_content::contact_info_content(ContactInfoContent::new()));
        }
        match self.content {
            ::std::option::Option::Some(GossipMessage_oneof_content::contact_info_content(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_contact_info_content(&mut self) -> ContactInfoContent {
        if self.has_contact_info_content() {
            match self.content.take() {
                ::std::option::Option::Some(GossipMessage_oneof_content::contact_info_content(v)) => v,
                _ => panic!(),
            }
        } else {
            ContactInfoContent::new()
        }
    }

    // .NetworkLatencyMessage network_latency_message = 7;


    pub fn get_network_latency_message(&self) -> &NetworkLatencyMessage {
        match self.content {
            ::std::option::Option::Some(GossipMessage_oneof_content::network_latency_message(ref v)) => v,
            _ => <NetworkLatencyMessage as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_network_latency_message(&mut self) {
        self.content = ::std::option::Option::None;
    }

    pub fn has_network_latency_message(&self) -> bool {
        match self.content {
            ::std::option::Option::Some(GossipMessage_oneof_content::network_latency_message(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_network_latency_message(&mut self, v: NetworkLatencyMessage) {
        self.content = ::std::option::Option::Some(GossipMessage_oneof_content::network_latency_message(v))
    }

    // Mutable pointer to the field.
    pub fn mut_network_latency_message(&mut self) -> &mut NetworkLatencyMessage {
        if let ::std::option::Option::Some(GossipMessage_oneof_content::network_latency_message(_)) = self.content {
        } else {
            self.content = ::std::option::Option::Some(GossipMessage_oneof_content::network_latency_message(NetworkLatencyMessage::new()));
        }
        match self.content {
            ::std::option::Option::Some(GossipMessage_oneof_content::network_latency_message(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_network_latency_message(&mut self) -> NetworkLatencyMessage {
        if self.has_network_latency_message() {
            match self.content.take() {
                ::std::option::Option::Some(GossipMessage_oneof_content::network_latency_message(v)) => v,
                _ => panic!(),
            }
        } else {
            NetworkLatencyMessage::new()
        }
    }

    // .MessageBundle message_bundle = 9;


    pub fn get_message_bundle(&self) -> &MessageBundle {
        match self.content {
            ::std::option::Option::Some(GossipMessage_oneof_content::message_bundle(ref v)) => v,
            _ => <MessageBundle as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_message_bundle(&mut self) {
        self.content = ::std::option::Option::None;
    }

    pub fn has_message_bundle(&self) -> bool {
        match self.content {
            ::std::option::Option::Some(GossipMessage_oneof_content::message_bundle(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_message_bundle(&mut self, v: MessageBundle) {
        self.content = ::std::option::Option::Some(GossipMessage_oneof_content::message_bundle(v))
    }

    // Mutable pointer to the field.
    pub fn mut_message_bundle(&mut self) -> &mut MessageBundle {
        if let ::std::option::Option::Some(GossipMessage_oneof_content::message_bundle(_)) = self.content {
        } else {
            self.content = ::std::option::Option::Some(GossipMessage_oneof_content::message_bundle(MessageBundle::new()));
        }
        match self.content {
            ::std::option::Option::Some(GossipMessage_oneof_content::message_bundle(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_message_bundle(&mut self) -> MessageBundle {
        if self.has_message_bundle() {
            match self.content.take() {
                ::std::option::Option::Some(GossipMessage_oneof_content::message_bundle(v)) => v,
                _ => panic!(),
            }
        } else {
            MessageBundle::new()
        }
    }

    // repeated string topics = 4;


    pub fn get_topics(&self) -> &[::std::string::String] {
        &self.topics
    }
    pub fn clear_topics(&mut self) {
        self.topics.clear();
    }

    // Param is passed by value, moved
    pub fn set_topics(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.topics = v;
    }

    // Mutable pointer to the field.
    pub fn mut_topics(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.topics
    }

    // Take field
    pub fn take_topics(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.topics, ::protobuf::RepeatedField::new())
    }

    // bytes peer_id = 5;


    pub fn get_peer_id(&self) -> &[u8] {
        &self.peer_id
    }
    pub fn clear_peer_id(&mut self) {
        self.peer_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_peer_id(&mut self, v: ::std::vec::Vec<u8>) {
        self.peer_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_peer_id(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.peer_id
    }

    // Take field
    pub fn take_peer_id(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.peer_id, ::std::vec::Vec::new())
    }

    // .GossipVersion version = 6;


    pub fn get_version(&self) -> GossipVersion {
        self.version
    }
    pub fn clear_version(&mut self) {
        self.version = GossipVersion::GOSSIP_VERSION_V1;
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: GossipVersion) {
        self.version = v;
    }

    // uint32 timestamp = 8;


    pub fn get_timestamp(&self) -> u32 {
        self.timestamp
    }
    pub fn clear_timestamp(&mut self) {
        self.timestamp = 0;
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: u32) {
        self.timestamp = v;
    }
}

impl ::protobuf::Message for GossipMessage {
    fn is_initialized(&self) -> bool {
        if let Some(GossipMessage_oneof_content::message(ref v)) = self.content {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(GossipMessage_oneof_content::contact_info_content(ref v)) = self.content {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(GossipMessage_oneof_content::network_latency_message(ref v)) = self.content {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(GossipMessage_oneof_content::message_bundle(ref v)) = self.content {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.content = ::std::option::Option::Some(GossipMessage_oneof_content::message(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.content = ::std::option::Option::Some(GossipMessage_oneof_content::contact_info_content(is.read_message()?));
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.content = ::std::option::Option::Some(GossipMessage_oneof_content::network_latency_message(is.read_message()?));
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.content = ::std::option::Option::Some(GossipMessage_oneof_content::message_bundle(is.read_message()?));
                },
                4 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.topics)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.peer_id)?;
                },
                6 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.version, 6, &mut self.unknown_fields)?
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.timestamp = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.topics {
            my_size += ::protobuf::rt::string_size(4, &value);
        };
        if !self.peer_id.is_empty() {
            my_size += ::protobuf::rt::bytes_size(5, &self.peer_id);
        }
        if self.version != GossipVersion::GOSSIP_VERSION_V1 {
            my_size += ::protobuf::rt::enum_size(6, self.version);
        }
        if self.timestamp != 0 {
            my_size += ::protobuf::rt::value_size(8, self.timestamp, ::protobuf::wire_format::WireTypeVarint);
        }
        if let ::std::option::Option::Some(ref v) = self.content {
            match v {
                &GossipMessage_oneof_content::message(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &GossipMessage_oneof_content::contact_info_content(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &GossipMessage_oneof_content::network_latency_message(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &GossipMessage_oneof_content::message_bundle(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.topics {
            os.write_string(4, &v)?;
        };
        if !self.peer_id.is_empty() {
            os.write_bytes(5, &self.peer_id)?;
        }
        if self.version != GossipVersion::GOSSIP_VERSION_V1 {
            os.write_enum(6, ::protobuf::ProtobufEnum::value(&self.version))?;
        }
        if self.timestamp != 0 {
            os.write_uint32(8, self.timestamp)?;
        }
        if let ::std::option::Option::Some(ref v) = self.content {
            match v {
                &GossipMessage_oneof_content::message(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &GossipMessage_oneof_content::contact_info_content(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &GossipMessage_oneof_content::network_latency_message(ref v) => {
                    os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &GossipMessage_oneof_content::message_bundle(ref v) => {
                    os.write_tag(9, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GossipMessage {
        GossipMessage::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, super::message::Message>(
                "message",
                GossipMessage::has_message,
                GossipMessage::get_message,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ContactInfoContent>(
                "contact_info_content",
                GossipMessage::has_contact_info_content,
                GossipMessage::get_contact_info_content,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, NetworkLatencyMessage>(
                "network_latency_message",
                GossipMessage::has_network_latency_message,
                GossipMessage::get_network_latency_message,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, MessageBundle>(
                "message_bundle",
                GossipMessage::has_message_bundle,
                GossipMessage::get_message_bundle,
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "topics",
                |m: &GossipMessage| { &m.topics },
                |m: &mut GossipMessage| { &mut m.topics },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "peer_id",
                |m: &GossipMessage| { &m.peer_id },
                |m: &mut GossipMessage| { &mut m.peer_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<GossipVersion>>(
                "version",
                |m: &GossipMessage| { &m.version },
                |m: &mut GossipMessage| { &mut m.version },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "timestamp",
                |m: &GossipMessage| { &m.timestamp },
                |m: &mut GossipMessage| { &mut m.timestamp },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GossipMessage>(
                "GossipMessage",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GossipMessage {
        static instance: ::protobuf::rt::LazyV2<GossipMessage> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GossipMessage::new)
    }
}

impl ::protobuf::Clear for GossipMessage {
    fn clear(&mut self) {
        self.content = ::std::option::Option::None;
        self.content = ::std::option::Option::None;
        self.content = ::std::option::Option::None;
        self.content = ::std::option::Option::None;
        self.topics.clear();
        self.peer_id.clear();
        self.version = GossipVersion::GOSSIP_VERSION_V1;
        self.timestamp = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GossipMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GossipMessage {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum GossipVersion {
    GOSSIP_VERSION_V1 = 0,
    GOSSIP_VERSION_V1_1 = 1,
}

impl ::protobuf::ProtobufEnum for GossipVersion {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<GossipVersion> {
        match value {
            0 => ::std::option::Option::Some(GossipVersion::GOSSIP_VERSION_V1),
            1 => ::std::option::Option::Some(GossipVersion::GOSSIP_VERSION_V1_1),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [GossipVersion] = &[
            GossipVersion::GOSSIP_VERSION_V1,
            GossipVersion::GOSSIP_VERSION_V1_1,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<GossipVersion>("GossipVersion", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for GossipVersion {
}

impl ::std::default::Default for GossipVersion {
    fn default() -> Self {
        GossipVersion::GOSSIP_VERSION_V1
    }
}

impl ::protobuf::reflect::ProtobufValue for GossipVersion {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0cgossip.proto\x1a\rmessage.proto\"~\n\x11GossipAddressInfo\x12\x1a\
    \n\x07address\x18\x01\x20\x01(\tR\x07addressB\0\x12\x18\n\x06family\x18\
    \x02\x20\x01(\rR\x06familyB\0\x12\x14\n\x04port\x18\x03\x20\x01(\rR\x04p\
    ortB\0\x12\x1b\n\x08dns_name\x18\x04\x20\x01(\tR\x07dnsNameB\0:\0\"\xe6\
    \x02\n\x16ContactInfoContentBody\x12;\n\x0egossip_address\x18\x01\x20\
    \x01(\x0b2\x12.GossipAddressInfoR\rgossipAddressB\0\x125\n\x0brpc_addres\
    s\x18\x02\x20\x01(\x0b2\x12.GossipAddressInfoR\nrpcAddressB\0\x12)\n\x0f\
    excluded_hashes\x18\x03\x20\x03(\tR\x0eexcludedHashesB\0\x12\x16\n\x05co\
    unt\x18\x04\x20\x01(\rR\x05countB\0\x12!\n\x0bhub_version\x18\x05\x20\
    \x01(\tR\nhubVersionB\0\x12-\n\x07network\x18\x06\x20\x01(\x0e2\x11.Farc\
    asterNetworkR\x07networkB\0\x12!\n\x0bapp_version\x18\x07\x20\x01(\tR\na\
    ppVersionB\0\x12\x1e\n\ttimestamp\x18\x08\x20\x01(\x04R\ttimestampB\0:\0\
    \"\xec\x03\n\x12ContactInfoContent\x12;\n\x0egossip_address\x18\x01\x20\
    \x01(\x0b2\x12.GossipAddressInfoR\rgossipAddressB\0\x125\n\x0brpc_addres\
    s\x18\x02\x20\x01(\x0b2\x12.GossipAddressInfoR\nrpcAddressB\0\x12)\n\x0f\
    excluded_hashes\x18\x03\x20\x03(\tR\x0eexcludedHashesB\0\x12\x16\n\x05co\
    unt\x18\x04\x20\x01(\rR\x05countB\0\x12!\n\x0bhub_version\x18\x05\x20\
    \x01(\tR\nhubVersionB\0\x12-\n\x07network\x18\x06\x20\x01(\x0e2\x11.Farc\
    asterNetworkR\x07networkB\0\x12!\n\x0bapp_version\x18\x07\x20\x01(\tR\na\
    ppVersionB\0\x12\x1e\n\ttimestamp\x18\x08\x20\x01(\x04R\ttimestampB\0\
    \x12-\n\x04body\x18\t\x20\x01(\x0b2\x17.ContactInfoContentBodyR\x04bodyB\
    \0\x12\x1e\n\tsignature\x18\n\x20\x01(\x0cR\tsignatureB\0\x12\x18\n\x06s\
    igner\x18\x0b\x20\x01(\x0cR\x06signerB\0\x12\x1f\n\ndata_bytes\x18\x0c\
    \x20\x01(\x0cR\tdataBytesB\0:\0\"m\n\x0fPingMessageBody\x12/\n\x13ping_o\
    rigin_peer_id\x18\x01\x20\x01(\x0cR\x10pingOriginPeerIdB\0\x12'\n\x0epin\
    g_timestamp\x18\x02\x20\x01(\x04R\rpingTimestampB\0:\0\"\xc2\x01\n\x0eAc\
    kMessageBody\x12/\n\x13ping_origin_peer_id\x18\x01\x20\x01(\x0cR\x10ping\
    OriginPeerIdB\0\x12-\n\x12ack_origin_peer_id\x18\x02\x20\x01(\x0cR\x0fac\
    kOriginPeerIdB\0\x12'\n\x0eping_timestamp\x18\x03\x20\x01(\x04R\rpingTim\
    estampB\0\x12%\n\rack_timestamp\x18\x04\x20\x01(\x04R\x0cackTimestampB\0\
    :\0\"\x90\x01\n\x15NetworkLatencyMessage\x127\n\x0cping_message\x18\x02\
    \x20\x01(\x0b2\x10.PingMessageBodyH\0R\x0bpingMessageB\0\x124\n\x0back_m\
    essage\x18\x03\x20\x01(\x0b2\x0f.AckMessageBodyH\0R\nackMessageB\0B\x06\
    \n\x04body:\0\"O\n\rMessageBundle\x12\x14\n\x04hash\x18\x01\x20\x01(\x0c\
    R\x04hashB\0\x12&\n\x08messages\x18\x02\x20\x03(\x0b2\x08.MessageR\x08me\
    ssagesB\0:\0\"\x9f\x03\n\rGossipMessage\x12&\n\x07message\x18\x01\x20\
    \x01(\x0b2\x08.MessageH\0R\x07messageB\0\x12I\n\x14contact_info_content\
    \x18\x03\x20\x01(\x0b2\x13.ContactInfoContentH\0R\x12contactInfoContentB\
    \0\x12R\n\x17network_latency_message\x18\x07\x20\x01(\x0b2\x16.NetworkLa\
    tencyMessageH\0R\x15networkLatencyMessageB\0\x129\n\x0emessage_bundle\
    \x18\t\x20\x01(\x0b2\x0e.MessageBundleH\0R\rmessageBundleB\0\x12\x18\n\
    \x06topics\x18\x04\x20\x03(\tR\x06topicsB\0\x12\x19\n\x07peer_id\x18\x05\
    \x20\x01(\x0cR\x06peerIdB\0\x12*\n\x07version\x18\x06\x20\x01(\x0e2\x0e.\
    GossipVersionR\x07versionB\0\x12\x1e\n\ttimestamp\x18\x08\x20\x01(\rR\tt\
    imestampB\0B\t\n\x07content:\0*A\n\rGossipVersion\x12\x15\n\x11GOSSIP_VE\
    RSION_V1\x10\0\x12\x17\n\x13GOSSIP_VERSION_V1_1\x10\x01\x1a\0B\0b\x06pro\
    to3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
